#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod ast {
    use std::fmt;
    use crate::utils::polymorphic_enum;
    pub struct Module {
        pub functions: Vec<Box<FunctionDeclaration>>,
    }
    pub struct FunctionDeclaration {
        pub ret: Kind,
        pub name: String,
        pub params: Vec<Parameter>,
        pub statement: Box<CompoundStatement>,
        pub id: u32,
    }
    pub struct Parameter {
        pub kind: Kind,
        pub name: String,
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Parameter {
        #[inline]
        fn clone(&self) -> Parameter {
            Parameter {
                kind: ::core::clone::Clone::clone(&self.kind),
                name: ::core::clone::Clone::clone(&self.name),
            }
        }
    }
    pub enum Statement {
        Declare(DeclareStatement),
        Expr(ExprStatement),
        If(IfStatement),
        For(ForStatement),
        While(WhileStatement),
        Compound(CompoundStatement),
        Jump(JumpStatement),
    }
    pub struct DeclareStatement {
        pub id: u32,
        pub kind: Kind,
        pub name: String,
        pub val: Option<Box<Expr>>,
    }
    pub struct ExprStatement {
        pub expr: Option<Box<Expr>>,
    }
    pub struct IfStatement {
        pub condition: Box<Expr>,
        pub true_stmt: Box<Statement>,
        pub false_stmt: Option<Box<Statement>>,
    }
    pub struct ForStatement {
        pub init: Box<ExprStatement>,
        pub each: Box<ExprStatement>,
        pub end: Option<Box<Expr>>,
        pub stmt: Box<Statement>,
    }
    pub struct WhileStatement {
        pub condition: Box<Expr>,
        pub stmt: Box<Statement>,
    }
    pub struct CompoundStatement {
        pub stmts: Vec<Statement>,
    }
    pub struct JumpStatement {
        pub jump_type: JumpOp,
        pub expr: Option<Box<Expr>>,
    }
    pub enum Expr {
        Function(FunctionCall),
        Access(AccessExpr),
        Unary(UnaryExpr),
        Binary(BinaryExpr),
        Integer(i32),
        Float(f32),
        Ident(Identifier),
    }
    impl Expr {
        pub fn kind(&self) -> Option<Kind> {
            return match self {
                Expr::Function(a) => a.kind,
                Expr::Access(a) => a.kind,
                Expr::Unary(a) => a.kind,
                Expr::Binary(a) => a.kind,
                Expr::Integer(a) => a.kind,
                Expr::Float(a) => a.kind,
                Expr::Ident(a) => a.kind,
            };
        }
        pub fn id(&self) -> u32 {
            return match self {
                Expr::Function(a) => a.id,
                Expr::Access(a) => a.id,
                Expr::Unary(a) => a.id,
                Expr::Binary(a) => a.id,
                Expr::Integer(a) => a.id,
                Expr::Float(a) => a.id,
                Expr::Ident(a) => a.id,
            };
        }
    }
    pub struct FunctionCall {
        pub name: String,
        pub args: Vec<Expr>,
        pub kind: Option<Kind>,
        pub id: u32,
    }
    pub struct AccessExpr {
        pub name: String,
        pub offset: Box<Expr>,
        pub kind: Option<Kind>,
    }
    pub struct UnaryExpr {
        pub unary_op: UnaryOp,
        pub expr: Box<Expr>,
        pub kind: Option<Kind>,
    }
    pub struct BinaryExpr {
        pub binary_op: BinaryOp,
        pub left: Box<Expr>,
        pub right: Box<Expr>,
        pub kind: Option<Kind>,
    }
    pub struct Identifier {
        pub name: String,
        pub kind: Option<Kind>,
        pub id: u32,
    }
    pub enum BinaryOp {
        Mul,
        Div,
        Add,
        Sub,
        Leq,
        Geq,
        Lt,
        Gt,
        Eq,
        Peq,
        Teq,
        Deq,
        Seq,
        Neq,
        Or,
        And,
        Assign,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for BinaryOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    BinaryOp::Mul => "Mul",
                    BinaryOp::Div => "Div",
                    BinaryOp::Add => "Add",
                    BinaryOp::Sub => "Sub",
                    BinaryOp::Leq => "Leq",
                    BinaryOp::Geq => "Geq",
                    BinaryOp::Lt => "Lt",
                    BinaryOp::Gt => "Gt",
                    BinaryOp::Eq => "Eq",
                    BinaryOp::Peq => "Peq",
                    BinaryOp::Teq => "Teq",
                    BinaryOp::Deq => "Deq",
                    BinaryOp::Seq => "Seq",
                    BinaryOp::Neq => "Neq",
                    BinaryOp::Or => "Or",
                    BinaryOp::And => "And",
                    BinaryOp::Assign => "Assign",
                },
            )
        }
    }
    pub enum UnaryOp {
        Star,
        Not,
        Neg,
        Address,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for UnaryOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    UnaryOp::Star => "Star",
                    UnaryOp::Not => "Not",
                    UnaryOp::Neg => "Neg",
                    UnaryOp::Address => "Address",
                },
            )
        }
    }
    pub enum JumpOp {
        Continue,
        Return,
        Break,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for JumpOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    JumpOp::Continue => "Continue",
                    JumpOp::Return => "Return",
                    JumpOp::Break => "Break",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for JumpOp {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for JumpOp {
        #[inline]
        fn eq(&self, other: &JumpOp) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for JumpOp {}
    #[automatically_derived]
    impl ::core::cmp::Eq for JumpOp {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    pub struct Kind {
        pub indir: u32,
        pub prim: Primitive,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Kind {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "Kind",
                "indir",
                &self.indir,
                "prim",
                &&self.prim,
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Kind {
        #[inline]
        fn clone(&self) -> Kind {
            let _: ::core::clone::AssertParamIsClone<u32>;
            let _: ::core::clone::AssertParamIsClone<Primitive>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Kind {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Kind {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Kind {
        #[inline]
        fn eq(&self, other: &Kind) -> bool {
            self.indir == other.indir && self.prim == other.prim
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Kind {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Kind {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u32>;
            let _: ::core::cmp::AssertParamIsEq<Primitive>;
        }
    }
    impl Kind {
        pub fn void() -> Self {
            Self {
                indir: 0,
                prim: Primitive::Void,
            }
        }
        pub fn int() -> Self {
            Self {
                indir: 0,
                prim: Primitive::Integer,
            }
        }
        pub fn float() -> Self {
            Self {
                indir: 0,
                prim: Primitive::Float,
            }
        }
    }
    impl fmt::Display for Kind {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.write_fmt(
                format_args!("{0}{1}", self.prim, "*".repeat(self.indir as usize)),
            )
        }
    }
    pub enum Primitive {
        Void,
        Integer,
        Float,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Primitive {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Primitive::Void => "Void",
                    Primitive::Integer => "Integer",
                    Primitive::Float => "Float",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Primitive {
        #[inline]
        fn clone(&self) -> Primitive {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Primitive {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Primitive {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Primitive {
        #[inline]
        fn eq(&self, other: &Primitive) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Primitive {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Primitive {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    impl fmt::Display for Primitive {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.write_fmt(
                format_args!(
                    "{0}",
                    match self {
                        Primitive::Void => "void",
                        Primitive::Integer => "int",
                        Primitive::Float => "float",
                    },
                ),
            )
        }
    }
}
pub mod parser {
    use std::str::FromStr;
    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    #[rustfmt::skip]
    #[allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens,
        clippy::all
    )]
    mod __parse__module {
        use std::str::FromStr;
        use crate::ast::*;
        #[allow(unused_extern_crates)]
        extern crate lalrpop_util as __lalrpop_util;
        #[allow(unused_imports)]
        use self::__lalrpop_util::state_machine as __state_machine;
        extern crate core;
        extern crate alloc;
        use self::__lalrpop_util::lexer::Token;
        #[allow(dead_code)]
        pub(crate) enum __Symbol<'input> {
            Variant0(&'input str),
            Variant1(Box<Expr>),
            Variant2(alloc::vec::Vec<Box<Expr>>),
            Variant3(Parameter),
            Variant4(alloc::vec::Vec<Parameter>),
            Variant5(BinaryOp),
            Variant6(Vec<Box<Expr>>),
            Variant7(core::option::Option<Vec<Box<Expr>>>),
            Variant8(Vec<Parameter>),
            Variant9(core::option::Option<Vec<Parameter>>),
            Variant10(UnaryOp),
            Variant11(Module),
            Variant12(Box<Statement>),
            Variant13(core::option::Option<Box<Expr>>),
            Variant14(f32),
            Variant15(Box<FunctionDeclaration>),
            Variant16(Identifier),
            Variant17(i32),
            Variant18(u32),
            Variant19(core::option::Option<u32>),
            Variant20(Vec<Box<Statement>>),
            Variant21(core::option::Option<Vec<Box<Statement>>>),
            Variant22(Primitive),
            Variant23(Kind),
        }
        const __ACTION: &[i16] = &[
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            55,
            0,
            0,
            56,
            0,
            57,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            55,
            0,
            0,
            56,
            0,
            57,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            60,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -117,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            55,
            0,
            0,
            56,
            0,
            57,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            55,
            0,
            0,
            56,
            0,
            57,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            0,
            0,
            0,
            0,
            0,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            100,
            62,
            101,
            102,
            0,
            -53,
            0,
            -53,
            0,
            -53,
            0,
            0,
            103,
            0,
            -53,
            104,
            0,
            0,
            0,
            -53,
            -53,
            -53,
            0,
            -53,
            -53,
            -53,
            0,
            -53,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -53,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            105,
            0,
            -54,
            0,
            0,
            0,
            0,
            -54,
            0,
            0,
            0,
            0,
            -54,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -54,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -54,
            0,
            0,
            0,
            0,
            0,
            106,
            0,
            -59,
            0,
            -59,
            0,
            0,
            0,
            0,
            -59,
            0,
            0,
            0,
            0,
            -59,
            0,
            0,
            0,
            107,
            0,
            0,
            0,
            -59,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -59,
            0,
            0,
            0,
            0,
            0,
            -86,
            0,
            -86,
            0,
            -86,
            108,
            0,
            -86,
            0,
            -86,
            -86,
            0,
            109,
            0,
            -86,
            -86,
            -86,
            0,
            -86,
            -86,
            -86,
            0,
            -86,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -86,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -87,
            0,
            0,
            0,
            0,
            -87,
            0,
            0,
            0,
            0,
            -87,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -87,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            110,
            0,
            0,
            0,
            0,
            0,
            -100,
            0,
            -100,
            0,
            -100,
            0,
            0,
            0,
            0,
            -100,
            0,
            0,
            0,
            0,
            -100,
            111,
            112,
            0,
            -100,
            113,
            114,
            0,
            -100,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -100,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            21,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            118,
            62,
            101,
            102,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            0,
            0,
            0,
            -43,
            0,
            -43,
            0,
            -43,
            -43,
            120,
            -43,
            121,
            -43,
            -43,
            122,
            -43,
            123,
            -43,
            -43,
            -43,
            124,
            -43,
            -43,
            -43,
            0,
            -43,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -43,
            0,
            0,
            0,
            0,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            129,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            139,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            37,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            39,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            42,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            44,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            46,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            47,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            50,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            0,
            0,
            0,
            0,
            0,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            90,
            0,
            91,
            0,
            21,
            0,
            92,
            0,
            0,
            0,
            0,
            93,
            0,
            0,
            0,
            94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            95,
            96,
            0,
            55,
            97,
            98,
            56,
            22,
            57,
            99,
            10,
            0,
            0,
            62,
            101,
            102,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -84,
            0,
            0,
            -84,
            0,
            -84,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -115,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -115,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -114,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -114,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -113,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -113,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -85,
            0,
            0,
            -85,
            0,
            -85,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            63,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -116,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -89,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -89,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -69,
            0,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            -69,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -69,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -90,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -90,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -23,
            0,
            0,
            0,
            0,
            67,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -24,
            0,
            0,
            0,
            0,
            70,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -9,
            0,
            0,
            -9,
            0,
            -9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -88,
            0,
            0,
            0,
            0,
            -88,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -68,
            0,
            0,
            -68,
            0,
            -68,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -10,
            0,
            0,
            -10,
            0,
            -10,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -67,
            0,
            0,
            -67,
            0,
            -67,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -47,
            0,
            -47,
            0,
            -47,
            0,
            0,
            0,
            0,
            -47,
            0,
            0,
            0,
            0,
            -47,
            -47,
            -47,
            0,
            -47,
            -47,
            -47,
            0,
            -47,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -47,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -45,
            0,
            0,
            0,
            0,
            -45,
            0,
            0,
            0,
            0,
            -45,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -45,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -45,
            0,
            0,
            0,
            0,
            -103,
            0,
            -103,
            0,
            -103,
            0,
            -103,
            0,
            0,
            0,
            0,
            -103,
            0,
            0,
            0,
            -103,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -103,
            -103,
            0,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            0,
            -103,
            -103,
            -103,
            -103,
            -104,
            0,
            -104,
            0,
            -104,
            0,
            -104,
            0,
            0,
            0,
            0,
            -104,
            0,
            0,
            0,
            -104,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -104,
            -104,
            0,
            -104,
            -104,
            -104,
            -104,
            -104,
            -104,
            -104,
            -104,
            0,
            -104,
            -104,
            -104,
            -104,
            0,
            0,
            0,
            -39,
            0,
            -39,
            0,
            0,
            0,
            0,
            -39,
            0,
            0,
            0,
            0,
            -39,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -39,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -39,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            116,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -105,
            0,
            -105,
            0,
            -105,
            0,
            -105,
            0,
            0,
            0,
            0,
            -105,
            0,
            0,
            0,
            -105,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -105,
            -105,
            0,
            -105,
            -105,
            -105,
            -105,
            -105,
            -105,
            -105,
            -105,
            0,
            -105,
            -105,
            -105,
            -105,
            0,
            -95,
            0,
            -95,
            0,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            -95,
            0,
            -95,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -95,
            0,
            0,
            0,
            0,
            0,
            -93,
            0,
            -93,
            29,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            -93,
            30,
            -93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -93,
            0,
            0,
            0,
            0,
            0,
            -94,
            0,
            -94,
            0,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            -94,
            0,
            -94,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -94,
            0,
            0,
            0,
            0,
            -107,
            0,
            -107,
            0,
            -107,
            0,
            -107,
            0,
            0,
            0,
            0,
            -107,
            0,
            0,
            0,
            -107,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -107,
            -107,
            0,
            -107,
            -107,
            -107,
            -107,
            -107,
            -107,
            -107,
            -107,
            0,
            -107,
            -107,
            -107,
            -107,
            -108,
            0,
            -108,
            0,
            -108,
            0,
            -108,
            0,
            0,
            0,
            0,
            -108,
            0,
            0,
            0,
            -108,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -108,
            -108,
            0,
            -108,
            -108,
            -108,
            -108,
            -108,
            -108,
            -108,
            -108,
            0,
            -108,
            -108,
            -108,
            -108,
            0,
            -37,
            0,
            -37,
            0,
            -37,
            0,
            0,
            -37,
            0,
            -37,
            -37,
            0,
            0,
            0,
            -37,
            -37,
            -37,
            0,
            -37,
            -37,
            -37,
            0,
            -37,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -37,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -61,
            0,
            0,
            0,
            0,
            -61,
            0,
            0,
            0,
            0,
            -61,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -61,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -118,
            0,
            -118,
            0,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            -118,
            0,
            -118,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -118,
            0,
            0,
            0,
            0,
            0,
            -41,
            0,
            -41,
            0,
            -41,
            0,
            0,
            0,
            0,
            -41,
            0,
            0,
            0,
            0,
            -41,
            0,
            0,
            0,
            -41,
            0,
            0,
            0,
            -41,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -41,
            0,
            0,
            0,
            0,
            -106,
            0,
            -106,
            0,
            -106,
            0,
            -106,
            0,
            0,
            0,
            0,
            -106,
            0,
            0,
            0,
            -106,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -106,
            -106,
            0,
            -106,
            -106,
            -106,
            -106,
            -106,
            -106,
            -106,
            -106,
            0,
            -106,
            -106,
            -106,
            -106,
            -109,
            0,
            -109,
            0,
            -109,
            0,
            -109,
            0,
            0,
            0,
            0,
            -109,
            0,
            0,
            0,
            -109,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -109,
            -109,
            0,
            -109,
            -109,
            -109,
            -109,
            -109,
            -109,
            -109,
            -109,
            0,
            -109,
            -109,
            -109,
            -109,
            0,
            0,
            0,
            0,
            -49,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -49,
            -49,
            -49,
            0,
            0,
            0,
            0,
            -51,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -51,
            -51,
            -51,
            0,
            0,
            0,
            0,
            -48,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -48,
            -48,
            -48,
            0,
            0,
            0,
            0,
            -50,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -50,
            -50,
            -50,
            -65,
            0,
            -65,
            0,
            -65,
            0,
            -65,
            0,
            0,
            0,
            0,
            -65,
            0,
            0,
            0,
            -65,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -65,
            -65,
            0,
            -65,
            -65,
            -65,
            -65,
            -65,
            -65,
            -65,
            -65,
            0,
            -65,
            -65,
            -65,
            -65,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            126,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            127,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            32,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            33,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            34,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -56,
            0,
            -56,
            0,
            -56,
            0,
            -56,
            0,
            0,
            0,
            0,
            -56,
            0,
            0,
            0,
            -56,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            -56,
            0,
            -56,
            -56,
            -56,
            -56,
            0,
            -70,
            0,
            -70,
            0,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            -70,
            0,
            -70,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -70,
            0,
            0,
            0,
            0,
            0,
            -66,
            0,
            -66,
            0,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            -66,
            0,
            -66,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -66,
            0,
            0,
            0,
            0,
            -11,
            0,
            -11,
            0,
            -11,
            0,
            -11,
            0,
            0,
            0,
            0,
            -11,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -11,
            -11,
            -11,
            -12,
            0,
            -12,
            0,
            -12,
            0,
            -12,
            0,
            0,
            0,
            0,
            -12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -12,
            -12,
            -12,
            -13,
            0,
            -13,
            0,
            -13,
            0,
            -13,
            0,
            0,
            0,
            0,
            -13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -13,
            -13,
            -13,
            -28,
            0,
            -28,
            0,
            -28,
            0,
            -28,
            0,
            0,
            0,
            0,
            -28,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -28,
            -28,
            -28,
            -27,
            0,
            -27,
            0,
            -27,
            0,
            -27,
            0,
            0,
            0,
            0,
            -27,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -27,
            -27,
            -27,
            -29,
            0,
            -29,
            0,
            -29,
            0,
            -29,
            0,
            0,
            0,
            0,
            -29,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -29,
            -29,
            -29,
            -30,
            0,
            -30,
            0,
            -30,
            0,
            -30,
            0,
            0,
            0,
            0,
            -30,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -30,
            -30,
            -30,
            -31,
            0,
            -31,
            0,
            -31,
            0,
            -31,
            0,
            0,
            0,
            0,
            -31,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -31,
            -31,
            -31,
            -33,
            0,
            -33,
            0,
            -33,
            0,
            -33,
            0,
            0,
            0,
            0,
            -33,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -33,
            -33,
            -33,
            -35,
            0,
            -35,
            0,
            -35,
            0,
            -35,
            0,
            0,
            0,
            0,
            -35,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -35,
            -35,
            -35,
            -32,
            0,
            -32,
            0,
            -32,
            0,
            -32,
            0,
            0,
            0,
            0,
            -32,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -32,
            -32,
            -32,
            -34,
            0,
            -34,
            0,
            -34,
            0,
            -34,
            0,
            0,
            0,
            0,
            -34,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -34,
            -34,
            -34,
            0,
            -119,
            0,
            -119,
            0,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            -119,
            0,
            -119,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -119,
            0,
            0,
            0,
            0,
            -64,
            0,
            -64,
            0,
            -64,
            0,
            -64,
            0,
            0,
            0,
            0,
            -64,
            0,
            0,
            0,
            -64,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -64,
            -64,
            0,
            -64,
            -64,
            -64,
            -64,
            -64,
            -64,
            -64,
            -64,
            0,
            -64,
            -64,
            -64,
            -64,
            -110,
            0,
            -110,
            0,
            -110,
            0,
            -110,
            0,
            0,
            0,
            0,
            -110,
            0,
            0,
            0,
            -110,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -110,
            -110,
            0,
            -110,
            -110,
            -110,
            -110,
            -110,
            -110,
            -110,
            -110,
            0,
            -110,
            -110,
            -110,
            -110,
            -55,
            0,
            -55,
            0,
            -55,
            0,
            -55,
            0,
            0,
            0,
            0,
            -55,
            0,
            0,
            0,
            -55,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            -55,
            0,
            -55,
            -55,
            -55,
            -55,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            141,
            0,
            0,
            36,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -16,
            0,
            -16,
            0,
            -16,
            0,
            -16,
            0,
            0,
            0,
            0,
            -16,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -16,
            -16,
            -16,
            -14,
            0,
            -14,
            0,
            -14,
            0,
            -14,
            0,
            0,
            0,
            0,
            -14,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -14,
            -14,
            -14,
            -15,
            0,
            -15,
            0,
            -15,
            0,
            -15,
            0,
            0,
            0,
            0,
            -15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -15,
            -15,
            -15,
            -17,
            0,
            -17,
            0,
            -17,
            0,
            -17,
            0,
            0,
            0,
            0,
            -17,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -17,
            -17,
            -17,
            -18,
            0,
            -18,
            0,
            -18,
            0,
            -18,
            0,
            0,
            0,
            0,
            -18,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -18,
            -18,
            -18,
            0,
            0,
            0,
            0,
            0,
            143,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -81,
            0,
            -81,
            0,
            -81,
            0,
            -81,
            0,
            0,
            0,
            0,
            -81,
            0,
            0,
            0,
            -81,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -81,
            -81,
            0,
            -81,
            -81,
            -81,
            -81,
            -81,
            -81,
            -81,
            -81,
            0,
            -81,
            -81,
            -81,
            -81,
            -80,
            0,
            -80,
            0,
            -80,
            0,
            -80,
            0,
            0,
            0,
            0,
            -80,
            0,
            0,
            0,
            -80,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -80,
            -80,
            0,
            -80,
            -80,
            -80,
            -80,
            -80,
            -80,
            -80,
            -80,
            0,
            -80,
            -80,
            -80,
            -80,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            146,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -83,
            0,
            -83,
            0,
            -83,
            0,
            -83,
            0,
            0,
            0,
            0,
            -83,
            0,
            0,
            0,
            -83,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -83,
            -83,
            0,
            -83,
            -83,
            -83,
            -83,
            -83,
            -83,
            -83,
            -83,
            0,
            -83,
            -83,
            -83,
            -83,
            0,
            -36,
            0,
            -36,
            0,
            -36,
            0,
            0,
            -36,
            0,
            -36,
            -36,
            0,
            0,
            0,
            -36,
            -36,
            -36,
            0,
            -36,
            -36,
            -36,
            0,
            -36,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -36,
            0,
            0,
            0,
            0,
            0,
            -43,
            0,
            -43,
            0,
            -43,
            -43,
            0,
            -43,
            0,
            -43,
            -43,
            0,
            -43,
            0,
            -43,
            -43,
            -43,
            0,
            -43,
            -43,
            -43,
            0,
            -43,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -43,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -38,
            0,
            -38,
            0,
            0,
            0,
            0,
            -38,
            0,
            0,
            0,
            0,
            -38,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -38,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -38,
            0,
            0,
            0,
            0,
            0,
            -40,
            0,
            -40,
            0,
            -40,
            0,
            0,
            0,
            0,
            -40,
            0,
            0,
            0,
            0,
            -40,
            0,
            0,
            0,
            -40,
            0,
            0,
            0,
            -40,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -40,
            0,
            0,
            0,
            0,
            0,
            -42,
            0,
            -42,
            0,
            -42,
            -42,
            0,
            -42,
            0,
            -42,
            -42,
            0,
            -42,
            0,
            -42,
            -42,
            -42,
            0,
            -42,
            -42,
            -42,
            0,
            -42,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -42,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -44,
            0,
            0,
            0,
            0,
            -44,
            0,
            0,
            0,
            0,
            -44,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -44,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -44,
            0,
            0,
            0,
            0,
            0,
            -46,
            0,
            -46,
            0,
            -46,
            0,
            0,
            0,
            0,
            -46,
            0,
            0,
            0,
            0,
            -46,
            -46,
            -46,
            0,
            -46,
            -46,
            -46,
            0,
            -46,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -46,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            149,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -19,
            0,
            0,
            0,
            0,
            150,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -98,
            0,
            -98,
            0,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            -98,
            0,
            -98,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -98,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            151,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -57,
            0,
            -57,
            0,
            -57,
            0,
            -57,
            0,
            0,
            0,
            0,
            -57,
            0,
            0,
            0,
            -57,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -57,
            -57,
            0,
            -57,
            -57,
            -57,
            -57,
            -57,
            -57,
            -57,
            -57,
            0,
            -57,
            -57,
            -57,
            -57,
            0,
            0,
            0,
            0,
            0,
            -60,
            0,
            0,
            0,
            0,
            -60,
            0,
            0,
            0,
            0,
            -60,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -60,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -99,
            0,
            -99,
            0,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            -99,
            0,
            -99,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -99,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            38,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            40,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -82,
            0,
            -82,
            0,
            -82,
            0,
            -82,
            0,
            0,
            0,
            0,
            -82,
            0,
            0,
            0,
            -82,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -82,
            -82,
            0,
            -82,
            -82,
            -82,
            -82,
            -82,
            -82,
            -82,
            -82,
            0,
            -82,
            -82,
            -82,
            -82,
            0,
            0,
            0,
            0,
            0,
            41,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -20,
            0,
            0,
            0,
            0,
            154,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -97,
            0,
            -97,
            0,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            -97,
            0,
            -97,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -97,
            0,
            0,
            0,
            0,
            -4,
            0,
            -4,
            0,
            -4,
            0,
            -4,
            0,
            0,
            0,
            0,
            -4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -4,
            -4,
            -4,
            0,
            -96,
            0,
            -96,
            0,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            -96,
            0,
            -96,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -96,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            155,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            43,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -5,
            0,
            -5,
            0,
            -5,
            0,
            -5,
            0,
            0,
            0,
            0,
            -5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -5,
            -5,
            -5,
            -58,
            0,
            -58,
            0,
            -58,
            0,
            -58,
            0,
            0,
            0,
            0,
            -58,
            0,
            0,
            0,
            -58,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -58,
            -58,
            0,
            -58,
            -58,
            -58,
            -58,
            -58,
            -58,
            -58,
            -58,
            0,
            -58,
            -58,
            -58,
            -58,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            45,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            48,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -103,
            0,
            -103,
            0,
            -103,
            0,
            -103,
            0,
            0,
            0,
            0,
            -103,
            0,
            0,
            0,
            -103,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -103,
            -103,
            49,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            -103,
            0,
            -103,
            -103,
            -103,
            -103,
            -101,
            0,
            -101,
            0,
            -101,
            0,
            -101,
            0,
            0,
            0,
            0,
            -101,
            0,
            0,
            0,
            -101,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -101,
            -101,
            0,
            -101,
            -101,
            -101,
            -101,
            -101,
            -101,
            -101,
            -101,
            0,
            -101,
            -101,
            -101,
            -101,
            -71,
            0,
            -71,
            0,
            -71,
            0,
            -71,
            0,
            0,
            0,
            0,
            -71,
            0,
            0,
            0,
            -71,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -71,
            -71,
            0,
            -71,
            -71,
            -71,
            -71,
            -71,
            -71,
            -71,
            -71,
            0,
            -71,
            -71,
            -71,
            -71,
            0,
            0,
            0,
            0,
            0,
            51,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            52,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -79,
            0,
            -79,
            0,
            -79,
            0,
            -79,
            0,
            0,
            0,
            0,
            -79,
            0,
            0,
            0,
            -79,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -79,
            -79,
            0,
            -79,
            -79,
            -79,
            -79,
            -79,
            -79,
            -79,
            -79,
            0,
            -79,
            -79,
            -79,
            -79,
            0,
            0,
            0,
            0,
            0,
            53,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -75,
            0,
            -75,
            0,
            -75,
            0,
            -75,
            0,
            0,
            0,
            0,
            -75,
            0,
            0,
            0,
            -75,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -75,
            -75,
            0,
            -75,
            -75,
            -75,
            -75,
            -75,
            -75,
            -75,
            -75,
            0,
            -75,
            -75,
            -75,
            -75,
            -77,
            0,
            -77,
            0,
            -77,
            0,
            -77,
            0,
            0,
            0,
            0,
            -77,
            0,
            0,
            0,
            -77,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -77,
            -77,
            0,
            -77,
            -77,
            -77,
            -77,
            -77,
            -77,
            -77,
            -77,
            0,
            -77,
            -77,
            -77,
            -77,
            -78,
            0,
            -78,
            0,
            -78,
            0,
            -78,
            0,
            0,
            0,
            0,
            -78,
            0,
            0,
            0,
            -78,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -78,
            -78,
            0,
            -78,
            -78,
            -78,
            -78,
            -78,
            -78,
            -78,
            -78,
            0,
            -78,
            -78,
            -78,
            -78,
            -102,
            0,
            -102,
            0,
            -102,
            0,
            -102,
            0,
            0,
            0,
            0,
            -102,
            0,
            0,
            0,
            -102,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -102,
            -102,
            0,
            -102,
            -102,
            -102,
            -102,
            -102,
            -102,
            -102,
            -102,
            0,
            -102,
            -102,
            -102,
            -102,
            -73,
            0,
            -73,
            0,
            -73,
            0,
            -73,
            0,
            0,
            0,
            0,
            -73,
            0,
            0,
            0,
            -73,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -73,
            -73,
            0,
            -73,
            -73,
            -73,
            -73,
            -73,
            -73,
            -73,
            -73,
            0,
            -73,
            -73,
            -73,
            -73,
            -74,
            0,
            -74,
            0,
            -74,
            0,
            -74,
            0,
            0,
            0,
            0,
            -74,
            0,
            0,
            0,
            -74,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -74,
            -74,
            0,
            -74,
            -74,
            -74,
            -74,
            -74,
            -74,
            -74,
            -74,
            0,
            -74,
            -74,
            -74,
            -74,
            -76,
            0,
            -76,
            0,
            -76,
            0,
            -76,
            0,
            0,
            0,
            0,
            -76,
            0,
            0,
            0,
            -76,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -76,
            -76,
            0,
            -76,
            -76,
            -76,
            -76,
            -76,
            -76,
            -76,
            -76,
            0,
            -76,
            -76,
            -76,
            -76,
            -72,
            0,
            -72,
            0,
            -72,
            0,
            -72,
            0,
            0,
            0,
            0,
            -72,
            0,
            0,
            0,
            -72,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -72,
            -72,
            0,
            -72,
            -72,
            -72,
            -72,
            -72,
            -72,
            -72,
            -72,
            0,
            -72,
            -72,
            -72,
            -72,
        ];
        fn __action(state: i16, integer: usize) -> i16 {
            __ACTION[(state as usize) * 40 + integer]
        }
        const __EOF_ACTION: &[i16] = &[
            0,
            -52,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -84,
            0,
            0,
            0,
            -85,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -68,
            0,
            -67,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -56,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            -55,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ];
        fn __goto(state: i16, nt: usize) -> i16 {
            match nt {
                2 => 34,
                5 => 5,
                6 => 22,
                7 => 23,
                8 => 30,
                9 => 136,
                11 => 63,
                13 => 24,
                14 => 25,
                15 => 26,
                16 => 27,
                17 => 10,
                18 => 11,
                19 => 12,
                20 => 13,
                21 => 14,
                22 => 15,
                23 => 16,
                25 => {
                    match state {
                        27 => 135,
                        _ => 71,
                    }
                }
                26 => {
                    match state {
                        26 => 134,
                        _ => 72,
                    }
                }
                27 => {
                    match state {
                        7 => 68,
                        8 => 70,
                        39 => 157,
                        48 => 167,
                        _ => 73,
                    }
                }
                28 => 74,
                29 => {
                    match state {
                        23 => 131,
                        _ => 75,
                    }
                }
                30 => {
                    match state {
                        20 => 124,
                        21 => 127,
                        28 => 137,
                        29 => 139,
                        30 => 141,
                        31 => 143,
                        32 => 144,
                        33 => 146,
                        34 => 147,
                        35 => 151,
                        36 => 152,
                        37 => 155,
                        38 => 156,
                        41 => 160,
                        42 => 161,
                        44 => 163,
                        _ => 76,
                    }
                }
                32 => 77,
                33 => 78,
                34 => {
                    match state {
                        1 => 57,
                        _ => 53,
                    }
                }
                35 => {
                    match state {
                        3 => 60,
                        6 => 67,
                        18 => 118,
                        _ => 79,
                    }
                }
                36 => 80,
                37 => 81,
                38 => 82,
                39 => 1,
                40 => {
                    match state {
                        22 => 129,
                        _ => 83,
                    }
                }
                41 => 84,
                42 => {
                    match state {
                        5 => 65,
                        _ => 64,
                    }
                }
                43 => 58,
                45 => {
                    match state {
                        16 => 114,
                        _ => 85,
                    }
                }
                46 => {
                    match state {
                        24 => 132,
                        _ => 86,
                    }
                }
                47 => 87,
                48 => {
                    match state {
                        17 => 116,
                        39 => 158,
                        40 => 159,
                        43 => 162,
                        45 => 164,
                        46 => 165,
                        47 => 166,
                        49 => 168,
                        50 => 169,
                        51 => 170,
                        52 => 171,
                        _ => 88,
                    }
                }
                49 => 17,
                51 => 2,
                52 => {
                    match state {
                        0..=1 => 3,
                        4..=5 => 6,
                        _ => 18,
                    }
                }
                53 => {
                    match state {
                        22..=24 | 26..=27 => 130,
                        25 => 133,
                        _ => 19,
                    }
                }
                _ => 0,
            }
        }
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*=""###,
            r###""+""###,
            r###""+=""###,
            r###"",""###,
            r###""-""###,
            r###""-=""###,
            r###""/""###,
            r###""/=""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""break""###,
            r###""continue""###,
            r###""else""###,
            r###""float""###,
            r###""for""###,
            r###""if""###,
            r###""int""###,
            r###""return""###,
            r###""void""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"[a-zA-Z][a-zA-Z0-9]*"#"###,
            r###"r#"\\-?[0-9]*"#"###,
            r###"r#"\\-?[0-9]+\\.[0-9]*"#"###,
        ];
        fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __TERMINAL
                .iter()
                .enumerate()
                .filter_map(|(index, terminal)| {
                    let next_state = __action(__state, index);
                    if next_state == 0 {
                        None
                    } else {
                        Some(alloc::string::ToString::to_string(terminal))
                    }
                })
                .collect()
        }
        fn __expected_tokens_from_states<'input>(
            __states: &[i16],
            _: core::marker::PhantomData<(&'input ())>,
        ) -> alloc::vec::Vec<alloc::string::String> {
            __TERMINAL
                .iter()
                .enumerate()
                .filter_map(|(index, terminal)| {
                    if __accepts(
                        None,
                        __states,
                        Some(index),
                        core::marker::PhantomData::<(&())>,
                    ) {
                        Some(alloc::string::ToString::to_string(terminal))
                    } else {
                        None
                    }
                })
                .collect()
        }
        pub(crate) struct __StateMachine<'input> {
            input: &'input str,
            __phantom: core::marker::PhantomData<(&'input ())>,
        }
        impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
            type Location = usize;
            type Error = &'static str;
            type Token = Token<'input>;
            type TokenIndex = usize;
            type Symbol = __Symbol<'input>;
            type Success = Module;
            type StateIndex = i16;
            type Action = i16;
            type ReduceIndex = i16;
            type NonterminalIndex = usize;
            #[inline]
            fn start_location(&self) -> Self::Location {
                Default::default()
            }
            #[inline]
            fn start_state(&self) -> Self::StateIndex {
                0
            }
            #[inline]
            fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
                __token_to_integer(token, core::marker::PhantomData::<(&())>)
            }
            #[inline]
            fn action(&self, state: i16, integer: usize) -> i16 {
                __action(state, integer)
            }
            #[inline]
            fn error_action(&self, state: i16) -> i16 {
                __action(state, 40 - 1)
            }
            #[inline]
            fn eof_action(&self, state: i16) -> i16 {
                __EOF_ACTION[state as usize]
            }
            #[inline]
            fn goto(&self, state: i16, nt: usize) -> i16 {
                __goto(state, nt)
            }
            fn token_to_symbol(
                &self,
                token_index: usize,
                token: Self::Token,
            ) -> Self::Symbol {
                __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
            }
            fn expected_tokens(
                &self,
                state: i16,
            ) -> alloc::vec::Vec<alloc::string::String> {
                __expected_tokens(state)
            }
            fn expected_tokens_from_states(
                &self,
                states: &[i16],
            ) -> alloc::vec::Vec<alloc::string::String> {
                __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
            }
            #[inline]
            fn uses_error_recovery(&self) -> bool {
                false
            }
            #[inline]
            fn error_recovery_symbol(
                &self,
                recovery: __state_machine::ErrorRecovery<Self>,
            ) -> Self::Symbol {
                ::core::panicking::panic_fmt(
                    format_args!("error recovery not enabled for this grammar"),
                )
            }
            fn reduce(
                &mut self,
                action: i16,
                start_location: Option<&Self::Location>,
                states: &mut alloc::vec::Vec<i16>,
                symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
            ) -> Option<__state_machine::ParseResult<Self>> {
                __reduce(
                    self.input,
                    action,
                    start_location,
                    states,
                    symbols,
                    core::marker::PhantomData::<(&())>,
                )
            }
            fn simulate_reduce(
                &self,
                action: i16,
            ) -> __state_machine::SimulatedReduce<Self> {
                __simulate_reduce(action, core::marker::PhantomData::<(&())>)
            }
        }
        fn __token_to_integer<'input>(
            __token: &Token<'input>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> Option<usize> {
            match *__token {
                Token(3, _) if true => Some(0),
                Token(4, _) if true => Some(1),
                Token(5, _) if true => Some(2),
                Token(6, _) if true => Some(3),
                Token(7, _) if true => Some(4),
                Token(8, _) if true => Some(5),
                Token(9, _) if true => Some(6),
                Token(10, _) if true => Some(7),
                Token(11, _) if true => Some(8),
                Token(12, _) if true => Some(9),
                Token(13, _) if true => Some(10),
                Token(14, _) if true => Some(11),
                Token(15, _) if true => Some(12),
                Token(16, _) if true => Some(13),
                Token(17, _) if true => Some(14),
                Token(18, _) if true => Some(15),
                Token(19, _) if true => Some(16),
                Token(20, _) if true => Some(17),
                Token(21, _) if true => Some(18),
                Token(22, _) if true => Some(19),
                Token(23, _) if true => Some(20),
                Token(24, _) if true => Some(21),
                Token(25, _) if true => Some(22),
                Token(26, _) if true => Some(23),
                Token(27, _) if true => Some(24),
                Token(28, _) if true => Some(25),
                Token(29, _) if true => Some(26),
                Token(30, _) if true => Some(27),
                Token(31, _) if true => Some(28),
                Token(32, _) if true => Some(29),
                Token(33, _) if true => Some(30),
                Token(34, _) if true => Some(31),
                Token(35, _) if true => Some(32),
                Token(36, _) if true => Some(33),
                Token(37, _) if true => Some(34),
                Token(38, _) if true => Some(35),
                Token(39, _) if true => Some(36),
                Token(0, _) if true => Some(37),
                Token(1, _) if true => Some(38),
                Token(2, _) if true => Some(39),
                _ => None,
            }
        }
        fn __token_to_symbol<'input>(
            __token_index: usize,
            __token: Token<'input>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> __Symbol<'input> {
            match __token_index {
                0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
                | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30
                | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 => {
                    match __token {
                        Token(3, __tok0)
                        | Token(4, __tok0)
                        | Token(5, __tok0)
                        | Token(6, __tok0)
                        | Token(7, __tok0)
                        | Token(8, __tok0)
                        | Token(9, __tok0)
                        | Token(10, __tok0)
                        | Token(11, __tok0)
                        | Token(12, __tok0)
                        | Token(13, __tok0)
                        | Token(14, __tok0)
                        | Token(15, __tok0)
                        | Token(16, __tok0)
                        | Token(17, __tok0)
                        | Token(18, __tok0)
                        | Token(19, __tok0)
                        | Token(20, __tok0)
                        | Token(21, __tok0)
                        | Token(22, __tok0)
                        | Token(23, __tok0)
                        | Token(24, __tok0)
                        | Token(25, __tok0)
                        | Token(26, __tok0)
                        | Token(27, __tok0)
                        | Token(28, __tok0)
                        | Token(29, __tok0)
                        | Token(30, __tok0)
                        | Token(31, __tok0)
                        | Token(32, __tok0)
                        | Token(33, __tok0)
                        | Token(34, __tok0)
                        | Token(35, __tok0)
                        | Token(36, __tok0)
                        | Token(37, __tok0)
                        | Token(38, __tok0)
                        | Token(39, __tok0)
                        | Token(0, __tok0)
                        | Token(1, __tok0)
                        | Token(2, __tok0) if true => __Symbol::Variant0(__tok0),
                        _ => {
                            ::core::panicking::panic(
                                "internal error: entered unreachable code",
                            )
                        }
                    }
                }
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
        }
        fn __simulate_reduce<'input>(
            __reduce_index: i16,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> __state_machine::SimulatedReduce<__StateMachine<'input>> {
            match __reduce_index {
                0 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 0,
                    }
                }
                1 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 1,
                    }
                }
                2 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 1,
                    }
                }
                3 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 2,
                    }
                }
                4 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 2,
                    }
                }
                5 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 3,
                    }
                }
                6 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 4,
                    }
                }
                7 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 4,
                    }
                }
                8 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 5,
                    }
                }
                9 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 5,
                    }
                }
                10 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 6,
                    }
                }
                11 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 6,
                    }
                }
                12 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 7,
                    }
                }
                13 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 8,
                    }
                }
                14 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 8,
                    }
                }
                15 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 8,
                    }
                }
                16 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 8,
                    }
                }
                17 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 8,
                    }
                }
                18 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 9,
                    }
                }
                19 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 9,
                    }
                }
                20 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 10,
                    }
                }
                21 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 10,
                    }
                }
                22 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 11,
                    }
                }
                23 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 11,
                    }
                }
                24 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 12,
                    }
                }
                25 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 12,
                    }
                }
                26 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 13,
                    }
                }
                27 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 13,
                    }
                }
                28 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 14,
                    }
                }
                29 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 14,
                    }
                }
                30 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 15,
                    }
                }
                31 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 16,
                    }
                }
                32 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 16,
                    }
                }
                33 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 16,
                    }
                }
                34 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 16,
                    }
                }
                35 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 17,
                    }
                }
                36 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 17,
                    }
                }
                37 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 18,
                    }
                }
                38 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 18,
                    }
                }
                39 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 19,
                    }
                }
                40 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 19,
                    }
                }
                41 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 20,
                    }
                }
                42 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 20,
                    }
                }
                43 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 21,
                    }
                }
                44 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 21,
                    }
                }
                45 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 22,
                    }
                }
                46 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 22,
                    }
                }
                47 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 23,
                    }
                }
                48 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 23,
                    }
                }
                49 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 23,
                    }
                }
                50 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 23,
                    }
                }
                51 => __state_machine::SimulatedReduce::Accept,
                52 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 25,
                    }
                }
                53 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 26,
                    }
                }
                54 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 27,
                    }
                }
                55 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 27,
                    }
                }
                56 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 28,
                    }
                }
                57 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 5,
                        nonterminal_produced: 28,
                    }
                }
                58 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 29,
                    }
                }
                59 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 30,
                    }
                }
                60 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 30,
                    }
                }
                61 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 31,
                    }
                }
                62 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 31,
                    }
                }
                63 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 32,
                    }
                }
                64 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 32,
                    }
                }
                65 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 33,
                    }
                }
                66 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 6,
                        nonterminal_produced: 34,
                    }
                }
                67 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 5,
                        nonterminal_produced: 34,
                    }
                }
                68 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 35,
                    }
                }
                69 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 36,
                    }
                }
                70 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 5,
                        nonterminal_produced: 37,
                    }
                }
                71 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 9,
                        nonterminal_produced: 37,
                    }
                }
                72 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 8,
                        nonterminal_produced: 37,
                    }
                }
                73 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 8,
                        nonterminal_produced: 37,
                    }
                }
                74 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 7,
                        nonterminal_produced: 37,
                    }
                }
                75 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 8,
                        nonterminal_produced: 37,
                    }
                }
                76 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 7,
                        nonterminal_produced: 37,
                    }
                }
                77 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 7,
                        nonterminal_produced: 37,
                    }
                }
                78 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 6,
                        nonterminal_produced: 37,
                    }
                }
                79 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 38,
                    }
                }
                80 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 38,
                    }
                }
                81 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 38,
                    }
                }
                82 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 38,
                    }
                }
                83 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 39,
                    }
                }
                84 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 39,
                    }
                }
                85 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 40,
                    }
                }
                86 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 41,
                    }
                }
                87 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 42,
                    }
                }
                88 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 43,
                    }
                }
                89 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 43,
                    }
                }
                90 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 44,
                    }
                }
                91 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 44,
                    }
                }
                92 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 45,
                    }
                }
                93 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 45,
                    }
                }
                94 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 45,
                    }
                }
                95 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 4,
                        nonterminal_produced: 45,
                    }
                }
                96 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 4,
                        nonterminal_produced: 45,
                    }
                }
                97 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 45,
                    }
                }
                98 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 3,
                        nonterminal_produced: 45,
                    }
                }
                99 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 46,
                    }
                }
                100 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 5,
                        nonterminal_produced: 47,
                    }
                }
                101 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 7,
                        nonterminal_produced: 47,
                    }
                }
                102 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                103 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                104 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                105 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                106 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                107 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 48,
                    }
                }
                108 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 49,
                    }
                }
                109 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 49,
                    }
                }
                110 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 50,
                    }
                }
                111 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 0,
                        nonterminal_produced: 50,
                    }
                }
                112 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 51,
                    }
                }
                113 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 51,
                    }
                }
                114 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 51,
                    }
                }
                115 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 52,
                    }
                }
                116 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 52,
                    }
                }
                117 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 1,
                        nonterminal_produced: 53,
                    }
                }
                118 => {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop: 2,
                        nonterminal_produced: 53,
                    }
                }
                _ => {
                    ::core::panicking::panic_fmt(
                        format_args!("invalid reduction index {0}", __reduce_index),
                    )
                }
            }
        }
        pub struct moduleParser {
            builder: __lalrpop_util::lexer::MatcherBuilder,
            _priv: (),
        }
        impl moduleParser {
            pub fn new() -> moduleParser {
                let __builder = super::__intern_token::new_builder();
                moduleParser {
                    builder: __builder,
                    _priv: (),
                }
            }
            #[allow(dead_code)]
            pub fn parse<'input>(
                &self,
                input: &'input str,
            ) -> Result<
                Module,
                __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
            > {
                let mut __tokens = self.builder.matcher(input);
                __state_machine::Parser::drive(
                    __StateMachine {
                        input,
                        __phantom: core::marker::PhantomData::<(&())>,
                    },
                    __tokens,
                )
            }
        }
        fn __accepts<'input>(
            __error_state: Option<i16>,
            __states: &[i16],
            __opt_integer: Option<usize>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> bool {
            let mut __states = __states.to_vec();
            __states.extend(__error_state);
            loop {
                let mut __states_len = __states.len();
                let __top = __states[__states_len - 1];
                let __action = match __opt_integer {
                    None => __EOF_ACTION[__top as usize],
                    Some(__integer) => __action(__top, __integer),
                };
                if __action == 0 {
                    return false;
                }
                if __action > 0 {
                    return true;
                }
                let (__to_pop, __nt) = match __simulate_reduce(
                    -(__action + 1),
                    core::marker::PhantomData::<(&())>,
                ) {
                    __state_machine::SimulatedReduce::Reduce {
                        states_to_pop,
                        nonterminal_produced,
                    } => (states_to_pop, nonterminal_produced),
                    __state_machine::SimulatedReduce::Accept => return true,
                };
                __states_len -= __to_pop;
                __states.truncate(__states_len);
                let __top = __states[__states_len - 1];
                let __next_state = __goto(__top, __nt);
                __states.push(__next_state);
            }
        }
        pub(crate) fn __reduce<'input>(
            input: &'input str,
            __action: i16,
            __lookahead_start: Option<&usize>,
            __states: &mut alloc::vec::Vec<i16>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> Option<
            Result<
                Module,
                __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
            >,
        > {
            let (__pop_states, __nonterminal) = match __action {
                0 => {
                    __reduce0(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                1 => {
                    __reduce1(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                2 => {
                    __reduce2(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                3 => {
                    __reduce3(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                4 => {
                    __reduce4(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                5 => {
                    __reduce5(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                6 => {
                    __reduce6(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                7 => {
                    __reduce7(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                8 => {
                    __reduce8(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                9 => {
                    __reduce9(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                10 => {
                    __reduce10(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                11 => {
                    __reduce11(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                12 => {
                    __reduce12(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                13 => {
                    __reduce13(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                14 => {
                    __reduce14(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                15 => {
                    __reduce15(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                16 => {
                    __reduce16(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                17 => {
                    __reduce17(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                18 => {
                    __reduce18(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                19 => {
                    __reduce19(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                20 => {
                    __reduce20(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                21 => {
                    __reduce21(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                22 => {
                    __reduce22(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                23 => {
                    __reduce23(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                24 => {
                    __reduce24(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                25 => {
                    __reduce25(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                26 => {
                    __reduce26(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                27 => {
                    __reduce27(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                28 => {
                    __reduce28(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                29 => {
                    __reduce29(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                30 => {
                    __reduce30(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                31 => {
                    __reduce31(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                32 => {
                    __reduce32(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                33 => {
                    __reduce33(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                34 => {
                    __reduce34(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                35 => {
                    __reduce35(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                36 => {
                    __reduce36(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                37 => {
                    __reduce37(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                38 => {
                    __reduce38(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                39 => {
                    __reduce39(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                40 => {
                    __reduce40(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                41 => {
                    __reduce41(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                42 => {
                    __reduce42(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                43 => {
                    __reduce43(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                44 => {
                    __reduce44(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                45 => {
                    __reduce45(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                46 => {
                    __reduce46(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                47 => {
                    __reduce47(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                48 => {
                    __reduce48(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                49 => {
                    __reduce49(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                50 => {
                    __reduce50(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                51 => {
                    let __sym0 = __pop_Variant11(__symbols);
                    let __start = __sym0.0;
                    let __end = __sym0.2;
                    let __nt = super::__action0(input, __sym0);
                    return Some(Ok(__nt));
                }
                52 => {
                    __reduce52(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                53 => {
                    __reduce53(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                54 => {
                    __reduce54(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                55 => {
                    __reduce55(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                56 => {
                    __reduce56(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                57 => {
                    __reduce57(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                58 => {
                    __reduce58(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                59 => {
                    __reduce59(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                60 => {
                    __reduce60(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                61 => {
                    __reduce61(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                62 => {
                    __reduce62(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                63 => {
                    __reduce63(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                64 => {
                    __reduce64(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                65 => {
                    __reduce65(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                66 => {
                    __reduce66(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                67 => {
                    __reduce67(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                68 => {
                    __reduce68(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                69 => {
                    __reduce69(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                70 => {
                    __reduce70(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                71 => {
                    __reduce71(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                72 => {
                    __reduce72(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                73 => {
                    __reduce73(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                74 => {
                    __reduce74(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                75 => {
                    __reduce75(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                76 => {
                    __reduce76(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                77 => {
                    __reduce77(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                78 => {
                    __reduce78(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                79 => {
                    __reduce79(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                80 => {
                    __reduce80(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                81 => {
                    __reduce81(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                82 => {
                    __reduce82(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                83 => {
                    __reduce83(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                84 => {
                    __reduce84(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                85 => {
                    __reduce85(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                86 => {
                    __reduce86(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                87 => {
                    __reduce87(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                88 => {
                    __reduce88(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                89 => {
                    __reduce89(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                90 => {
                    __reduce90(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                91 => {
                    __reduce91(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                92 => {
                    __reduce92(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                93 => {
                    __reduce93(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                94 => {
                    __reduce94(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                95 => {
                    __reduce95(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                96 => {
                    __reduce96(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                97 => {
                    __reduce97(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                98 => {
                    __reduce98(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                99 => {
                    __reduce99(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                100 => {
                    __reduce100(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                101 => {
                    __reduce101(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                102 => {
                    __reduce102(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                103 => {
                    __reduce103(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                104 => {
                    __reduce104(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                105 => {
                    __reduce105(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                106 => {
                    __reduce106(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                107 => {
                    __reduce107(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                108 => {
                    __reduce108(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                109 => {
                    __reduce109(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                110 => {
                    __reduce110(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                111 => {
                    __reduce111(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                112 => {
                    __reduce112(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                113 => {
                    __reduce113(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                114 => {
                    __reduce114(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                115 => {
                    __reduce115(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                116 => {
                    __reduce116(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                117 => {
                    __reduce117(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                118 => {
                    __reduce118(
                        input,
                        __lookahead_start,
                        __symbols,
                        core::marker::PhantomData::<(&())>,
                    )
                }
                _ => {
                    ::core::panicking::panic_fmt(
                        format_args!("invalid action code {0}", __action),
                    )
                }
            };
            let __states_len = __states.len();
            __states.truncate(__states_len - __pop_states);
            let __state = *__states.last().unwrap();
            let __next_state = __goto(__state, __nonterminal);
            __states.push(__next_state);
            None
        }
        #[inline(never)]
        fn __symbol_type_mismatch() -> ! {
            ::core::panicking::panic_fmt(format_args!("symbol type mismatch"))
        }
        fn __pop_Variant5<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, BinaryOp, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant1<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Box<Expr>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant15<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Box<FunctionDeclaration>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant12<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Box<Statement>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant16<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Identifier, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant23<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Kind, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant11<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Module, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant3<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Parameter, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant22<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Primitive, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant10<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, UnaryOp, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant6<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Vec<Box<Expr>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant20<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Vec<Box<Statement>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant8<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, Vec<Parameter>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant2<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, alloc::vec::Vec<Box<Expr>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant4<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, alloc::vec::Vec<Parameter>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant13<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, core::option::Option<Box<Expr>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant7<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, core::option::Option<Vec<Box<Expr>>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant21<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, core::option::Option<Vec<Box<Statement>>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant9<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, core::option::Option<Vec<Parameter>>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant19<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, core::option::Option<u32>, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant14<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, f32, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant17<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, i32, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant18<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, u32, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        fn __pop_Variant0<'input>(
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        ) -> (usize, &'input str, usize) {
            match __symbols.pop() {
                Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
                _ => __symbol_type_mismatch(),
            }
        }
        pub(crate) fn __reduce0<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action99(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (2, 0)
        }
        pub(crate) fn __reduce1<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action97(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant2(__nt), __end));
            (0, 1)
        }
        pub(crate) fn __reduce2<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant2(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action98(input, __sym0);
            __symbols.push((__start, __Symbol::Variant2(__nt), __end));
            (1, 1)
        }
        pub(crate) fn __reduce3<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action104(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant2(__nt), __end));
            (2, 2)
        }
        pub(crate) fn __reduce4<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant1(__symbols);
            let __sym0 = __pop_Variant2(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action105(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant2(__nt), __end));
            (3, 2)
        }
        pub(crate) fn __reduce5<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant3(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action96(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant3(__nt), __end));
            (2, 3)
        }
        pub(crate) fn __reduce6<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action94(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant4(__nt), __end));
            (0, 4)
        }
        pub(crate) fn __reduce7<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant4(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action95(input, __sym0);
            __symbols.push((__start, __Symbol::Variant4(__nt), __end));
            (1, 4)
        }
        pub(crate) fn __reduce8<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant3(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action108(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant4(__nt), __end));
            (2, 5)
        }
        pub(crate) fn __reduce9<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant3(__symbols);
            let __sym0 = __pop_Variant4(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action109(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant4(__nt), __end));
            (3, 5)
        }
        pub(crate) fn __reduce10<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action25(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 6)
        }
        pub(crate) fn __reduce11<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action26(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 6)
        }
        pub(crate) fn __reduce12<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action15(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 7)
        }
        pub(crate) fn __reduce13<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action7(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 8)
        }
        pub(crate) fn __reduce14<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action8(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 8)
        }
        pub(crate) fn __reduce15<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action9(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 8)
        }
        pub(crate) fn __reduce16<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action10(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 8)
        }
        pub(crate) fn __reduce17<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action11(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 8)
        }
        pub(crate) fn __reduce18<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action106(input, __sym0);
            __symbols.push((__start, __Symbol::Variant6(__nt), __end));
            (1, 9)
        }
        pub(crate) fn __reduce19<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant1(__symbols);
            let __sym0 = __pop_Variant2(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action107(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant6(__nt), __end));
            (2, 9)
        }
        pub(crate) fn __reduce20<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant6(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action76(input, __sym0);
            __symbols.push((__start, __Symbol::Variant7(__nt), __end));
            (1, 10)
        }
        pub(crate) fn __reduce21<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action77(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant7(__nt), __end));
            (0, 10)
        }
        pub(crate) fn __reduce22<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant3(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action110(input, __sym0);
            __symbols.push((__start, __Symbol::Variant8(__nt), __end));
            (1, 11)
        }
        pub(crate) fn __reduce23<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant3(__symbols);
            let __sym0 = __pop_Variant4(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action111(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant8(__nt), __end));
            (2, 11)
        }
        pub(crate) fn __reduce24<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant8(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action91(input, __sym0);
            __symbols.push((__start, __Symbol::Variant9(__nt), __end));
            (1, 12)
        }
        pub(crate) fn __reduce25<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action92(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant9(__nt), __end));
            (0, 12)
        }
        pub(crate) fn __reduce26<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action17(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 13)
        }
        pub(crate) fn __reduce27<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action18(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 13)
        }
        pub(crate) fn __reduce28<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action28(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 14)
        }
        pub(crate) fn __reduce29<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action29(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 14)
        }
        pub(crate) fn __reduce30<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action13(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 15)
        }
        pub(crate) fn __reduce31<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action20(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 16)
        }
        pub(crate) fn __reduce32<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action21(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 16)
        }
        pub(crate) fn __reduce33<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action22(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 16)
        }
        pub(crate) fn __reduce34<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action23(input, __sym0);
            __symbols.push((__start, __Symbol::Variant5(__nt), __end));
            (1, 16)
        }
        pub(crate) fn __reduce35<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action81(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 17)
        }
        pub(crate) fn __reduce36<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action82(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 17)
        }
        pub(crate) fn __reduce37<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action87(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 18)
        }
        pub(crate) fn __reduce38<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action88(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 18)
        }
        pub(crate) fn __reduce39<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action85(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 19)
        }
        pub(crate) fn __reduce40<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action86(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 19)
        }
        pub(crate) fn __reduce41<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action79(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 20)
        }
        pub(crate) fn __reduce42<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action80(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 20)
        }
        pub(crate) fn __reduce43<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action89(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 21)
        }
        pub(crate) fn __reduce44<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action90(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 21)
        }
        pub(crate) fn __reduce45<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action83(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 22)
        }
        pub(crate) fn __reduce46<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action84(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 22)
        }
        pub(crate) fn __reduce47<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action32(input, __sym0);
            __symbols.push((__start, __Symbol::Variant10(__nt), __end));
            (1, 23)
        }
        pub(crate) fn __reduce48<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action33(input, __sym0);
            __symbols.push((__start, __Symbol::Variant10(__nt), __end));
            (1, 23)
        }
        pub(crate) fn __reduce49<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action34(input, __sym0);
            __symbols.push((__start, __Symbol::Variant10(__nt), __end));
            (1, 23)
        }
        pub(crate) fn __reduce50<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action35(input, __sym0);
            __symbols.push((__start, __Symbol::Variant10(__nt), __end));
            (1, 23)
        }
        pub(crate) fn __reduce52<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action24(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 25)
        }
        pub(crate) fn __reduce53<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action14(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 26)
        }
        pub(crate) fn __reduce54<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant20(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action130(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (3, 27)
        }
        pub(crate) fn __reduce55<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action131(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (2, 27)
        }
        pub(crate) fn __reduce56<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant16(__symbols);
            let __sym0 = __pop_Variant23(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action51(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (3, 28)
        }
        pub(crate) fn __reduce57<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 5) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
            }
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant1(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant16(__symbols);
            let __sym0 = __pop_Variant23(__symbols);
            let __start = __sym0.0;
            let __end = __sym4.2;
            let __nt = super::__action52(input, __sym0, __sym1, __sym2, __sym3, __sym4);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (5, 28)
        }
        pub(crate) fn __reduce58<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action16(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 29)
        }
        pub(crate) fn __reduce59<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant5(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action5(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 30)
        }
        pub(crate) fn __reduce60<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action6(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 30)
        }
        pub(crate) fn __reduce61<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action72(input, __sym0);
            __symbols.push((__start, __Symbol::Variant13(__nt), __end));
            (1, 31)
        }
        pub(crate) fn __reduce62<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action73(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant13(__nt), __end));
            (0, 31)
        }
        pub(crate) fn __reduce63<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action116(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (2, 32)
        }
        pub(crate) fn __reduce64<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action117(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 32)
        }
        pub(crate) fn __reduce65<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action69(input, __sym0);
            __symbols.push((__start, __Symbol::Variant14(__nt), __end));
            (1, 33)
        }
        pub(crate) fn __reduce66<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 6) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
            }
            let __sym5 = __pop_Variant12(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant8(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant16(__symbols);
            let __sym0 = __pop_Variant23(__symbols);
            let __start = __sym0.0;
            let __end = __sym5.2;
            let __nt = super::__action114(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
            );
            __symbols.push((__start, __Symbol::Variant15(__nt), __end));
            (6, 34)
        }
        pub(crate) fn __reduce67<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 5) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
            }
            let __sym4 = __pop_Variant12(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant16(__symbols);
            let __sym0 = __pop_Variant23(__symbols);
            let __start = __sym0.0;
            let __end = __sym4.2;
            let __nt = super::__action115(input, __sym0, __sym1, __sym2, __sym3, __sym4);
            __symbols.push((__start, __Symbol::Variant15(__nt), __end));
            (5, 34)
        }
        pub(crate) fn __reduce68<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action67(input, __sym0);
            __symbols.push((__start, __Symbol::Variant16(__nt), __end));
            (1, 35)
        }
        pub(crate) fn __reduce69<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action68(input, __sym0);
            __symbols.push((__start, __Symbol::Variant17(__nt), __end));
            (1, 36)
        }
        pub(crate) fn __reduce70<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 5) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
            }
            let __sym4 = __pop_Variant12(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym4.2;
            let __nt = super::__action56(input, __sym0, __sym1, __sym2, __sym3, __sym4);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (5, 37)
        }
        pub(crate) fn __reduce71<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 9) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
            }
            let __sym8 = __pop_Variant12(__symbols);
            let __sym7 = __pop_Variant0(__symbols);
            let __sym6 = __pop_Variant1(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant1(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym8.2;
            let __nt = super::__action118(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
                __sym7,
                __sym8,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (9, 37)
        }
        pub(crate) fn __reduce72<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 8) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
            }
            let __sym7 = __pop_Variant12(__symbols);
            let __sym6 = __pop_Variant0(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant1(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym7.2;
            let __nt = super::__action119(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
                __sym7,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (8, 37)
        }
        pub(crate) fn __reduce73<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 8) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
            }
            let __sym7 = __pop_Variant12(__symbols);
            let __sym6 = __pop_Variant0(__symbols);
            let __sym5 = __pop_Variant1(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym7.2;
            let __nt = super::__action120(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
                __sym7,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (8, 37)
        }
        pub(crate) fn __reduce74<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 7) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
            }
            let __sym6 = __pop_Variant12(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym6.2;
            let __nt = super::__action121(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (7, 37)
        }
        pub(crate) fn __reduce75<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 8) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
            }
            let __sym7 = __pop_Variant12(__symbols);
            let __sym6 = __pop_Variant0(__symbols);
            let __sym5 = __pop_Variant1(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant1(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym7.2;
            let __nt = super::__action122(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
                __sym7,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (8, 37)
        }
        pub(crate) fn __reduce76<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 7) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
            }
            let __sym6 = __pop_Variant12(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant1(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym6.2;
            let __nt = super::__action123(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (7, 37)
        }
        pub(crate) fn __reduce77<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 7) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
            }
            let __sym6 = __pop_Variant12(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant1(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym6.2;
            let __nt = super::__action124(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (7, 37)
        }
        pub(crate) fn __reduce78<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 6) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
            }
            let __sym5 = __pop_Variant12(__symbols);
            let __sym4 = __pop_Variant0(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym5.2;
            let __nt = super::__action125(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (6, 37)
        }
        pub(crate) fn __reduce79<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action58(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (2, 38)
        }
        pub(crate) fn __reduce80<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action59(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (2, 38)
        }
        pub(crate) fn __reduce81<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant1(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action126(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (3, 38)
        }
        pub(crate) fn __reduce82<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action127(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (2, 38)
        }
        pub(crate) fn __reduce83<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant15(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action1(input, __sym0);
            __symbols.push((__start, __Symbol::Variant11(__nt), __end));
            (1, 39)
        }
        pub(crate) fn __reduce84<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant15(__symbols);
            let __sym0 = __pop_Variant11(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action2(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant11(__nt), __end));
            (2, 39)
        }
        pub(crate) fn __reduce85<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action27(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 40)
        }
        pub(crate) fn __reduce86<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action12(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 41)
        }
        pub(crate) fn __reduce87<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant16(__symbols);
            let __sym0 = __pop_Variant23(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action4(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant3(__nt), __end));
            (2, 42)
        }
        pub(crate) fn __reduce88<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action65(input, __sym0);
            __symbols.push((__start, __Symbol::Variant18(__nt), __end));
            (1, 43)
        }
        pub(crate) fn __reduce89<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant18(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action66(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant18(__nt), __end));
            (2, 43)
        }
        pub(crate) fn __reduce90<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant18(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action70(input, __sym0);
            __symbols.push((__start, __Symbol::Variant19(__nt), __end));
            (1, 44)
        }
        pub(crate) fn __reduce91<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action71(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant19(__nt), __end));
            (0, 44)
        }
        pub(crate) fn __reduce92<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant16(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action36(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 45)
        }
        pub(crate) fn __reduce93<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant17(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action37(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 45)
        }
        pub(crate) fn __reduce94<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant14(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action38(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 45)
        }
        pub(crate) fn __reduce95<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 4) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
            }
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant16(__symbols);
            let __start = __sym0.0;
            let __end = __sym3.2;
            let __nt = super::__action39(input, __sym0, __sym1, __sym2, __sym3);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (4, 45)
        }
        pub(crate) fn __reduce96<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 4) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
            }
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant6(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant16(__symbols);
            let __start = __sym0.0;
            let __end = __sym3.2;
            let __nt = super::__action112(input, __sym0, __sym1, __sym2, __sym3);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (4, 45)
        }
        pub(crate) fn __reduce97<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant16(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action113(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 45)
        }
        pub(crate) fn __reduce98<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 3) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
            }
            let __sym2 = __pop_Variant0(__symbols);
            let __sym1 = __pop_Variant1(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym2.2;
            let __nt = super::__action41(input, __sym0, __sym1, __sym2);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (3, 45)
        }
        pub(crate) fn __reduce99<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action19(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 46)
        }
        pub(crate) fn __reduce100<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 5) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
            }
            let __sym4 = __pop_Variant12(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym4.2;
            let __nt = super::__action54(input, __sym0, __sym1, __sym2, __sym3, __sym4);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (5, 47)
        }
        pub(crate) fn __reduce101<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 7) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
            }
            let __sym6 = __pop_Variant12(__symbols);
            let __sym5 = __pop_Variant0(__symbols);
            let __sym4 = __pop_Variant12(__symbols);
            let __sym3 = __pop_Variant0(__symbols);
            let __sym2 = __pop_Variant1(__symbols);
            let __sym1 = __pop_Variant0(__symbols);
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym6.2;
            let __nt = super::__action55(
                input,
                __sym0,
                __sym1,
                __sym2,
                __sym3,
                __sym4,
                __sym5,
                __sym6,
            );
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (7, 47)
        }
        pub(crate) fn __reduce102<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action44(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce103<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action45(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce104<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action46(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce105<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action47(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce106<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action48(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce107<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action49(input, __sym0);
            __symbols.push((__start, __Symbol::Variant12(__nt), __end));
            (1, 48)
        }
        pub(crate) fn __reduce108<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant12(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action42(input, __sym0);
            __symbols.push((__start, __Symbol::Variant20(__nt), __end));
            (1, 49)
        }
        pub(crate) fn __reduce109<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant12(__symbols);
            let __sym0 = __pop_Variant20(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action43(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant20(__nt), __end));
            (2, 49)
        }
        pub(crate) fn __reduce110<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant20(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action74(input, __sym0);
            __symbols.push((__start, __Symbol::Variant21(__nt), __end));
            (1, 50)
        }
        pub(crate) fn __reduce111<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __start = __lookahead_start
                .cloned()
                .or_else(|| __symbols.last().map(|s| s.2.clone()))
                .unwrap_or_default();
            let __end = __start.clone();
            let __nt = super::__action75(input, &__start, &__end);
            __symbols.push((__start, __Symbol::Variant21(__nt), __end));
            (0, 50)
        }
        pub(crate) fn __reduce112<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action62(input, __sym0);
            __symbols.push((__start, __Symbol::Variant22(__nt), __end));
            (1, 51)
        }
        pub(crate) fn __reduce113<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action63(input, __sym0);
            __symbols.push((__start, __Symbol::Variant22(__nt), __end));
            (1, 51)
        }
        pub(crate) fn __reduce114<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant0(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action64(input, __sym0);
            __symbols.push((__start, __Symbol::Variant22(__nt), __end));
            (1, 51)
        }
        pub(crate) fn __reduce115<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant18(__symbols);
            let __sym0 = __pop_Variant22(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action128(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant23(__nt), __end));
            (2, 52)
        }
        pub(crate) fn __reduce116<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant22(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action129(input, __sym0);
            __symbols.push((__start, __Symbol::Variant23(__nt), __end));
            (1, 52)
        }
        pub(crate) fn __reduce117<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            let __sym0 = __pop_Variant1(__symbols);
            let __start = __sym0.0;
            let __end = __sym0.2;
            let __nt = super::__action30(input, __sym0);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (1, 53)
        }
        pub(crate) fn __reduce118<'input>(
            input: &'input str,
            __lookahead_start: Option<&usize>,
            __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
            _: core::marker::PhantomData<(&'input ())>,
        ) -> (usize, usize) {
            if !(__symbols.len() >= 2) {
                ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
            }
            let __sym1 = __pop_Variant1(__symbols);
            let __sym0 = __pop_Variant10(__symbols);
            let __start = __sym0.0;
            let __end = __sym1.2;
            let __nt = super::__action31(input, __sym0, __sym1);
            __symbols.push((__start, __Symbol::Variant1(__nt), __end));
            (2, 53)
        }
    }
    pub use self::__parse__module::moduleParser;
    mod __intern_token {
        #![allow(unused_imports)]
        use std::str::FromStr;
        use crate::ast::*;
        #[allow(unused_extern_crates)]
        extern crate lalrpop_util as __lalrpop_util;
        #[allow(unused_imports)]
        use self::__lalrpop_util::state_machine as __state_machine;
        extern crate core;
        extern crate alloc;
        pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
            let __strs: &[(&str, bool)] = &[
                ("^((?:[A-Za-z][0-9A-Za-z]*))", false),
                ("^((?:\\-?[0-9]*))", false),
                ("^((?:\\-?[0-9]+\\.[0-9]*))", false),
                ("^(!)", false),
                ("^((?:!=))", false),
                ("^(\\&)", false),
                ("^((?:\\&\\&))", false),
                ("^(\\()", false),
                ("^(\\))", false),
                ("^(\\*)", false),
                ("^((?:\\*=))", false),
                ("^(\\+)", false),
                ("^((?:\\+=))", false),
                ("^(,)", false),
                ("^(\\-)", false),
                ("^((?:\\-=))", false),
                ("^(/)", false),
                ("^((?:/=))", false),
                ("^(;)", false),
                ("^(<)", false),
                ("^((?:<=))", false),
                ("^(=)", false),
                ("^((?:==))", false),
                ("^(>)", false),
                ("^((?:>=))", false),
                ("^(\\[)", false),
                ("^(\\])", false),
                ("^((?:break))", false),
                ("^((?:continue))", false),
                ("^((?:else))", false),
                ("^((?:float))", false),
                ("^((?:for))", false),
                ("^((?:if))", false),
                ("^((?:int))", false),
                ("^((?:return))", false),
                ("^((?:void))", false),
                ("^((?:while))", false),
                ("^(\\{)", false),
                ("^((?:\\|\\|))", false),
                ("^(\\})", false),
                ("^((?:(?://)[\0-\t\u{b}\u{c}\u{e}-\u{10ffff}]*[\n\r]*))", true),
                (
                    "^((?:(?:/\\*)[\0-\\)\\+-\u{10ffff}]*\\*+(?:[\0-\\)\\+-\\.0-\u{10ffff}][\0-\\)\\+-\u{10ffff}]*\\*+)*/))",
                    true,
                ),
                (
                    "^([\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}\u{2029}\u{202f}\u{205f}\u{3000}]*)",
                    true,
                ),
            ];
            __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
        }
    }
    pub(crate) use self::__lalrpop_util::lexer::Token;
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action0<'input>(
        input: &'input str,
        (_, __0, _): (usize, Module, usize),
    ) -> Module {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action1<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<FunctionDeclaration>, usize),
    ) -> Module {
        {
            Module {
                functions: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0])),
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action2<'input>(
        input: &'input str,
        (_, mut m, _): (usize, Module, usize),
        (_, f, _): (usize, Box<FunctionDeclaration>, usize),
    ) -> Module {
        {
            m.functions.push(f);
            m
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action3<'input>(
        input: &'input str,
        (_, k, _): (usize, Kind, usize),
        (_, i, _): (usize, Identifier, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, p, _): (usize, core::option::Option<Vec<Parameter>>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s, _): (usize, Box<Statement>, usize),
    ) -> Box<FunctionDeclaration> {
        Box::new(FunctionDeclaration {
            ret: k,
            name: i.name,
            params: p.unwrap_or_else(|| Vec::new()),
            statement: s,
        })
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action4<'input>(
        input: &'input str,
        (_, k, _): (usize, Kind, usize),
        (_, i, _): (usize, Identifier, usize),
    ) -> Parameter {
        { Parameter { kind: k, name: i.name } }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action5<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action6<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action7<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Peq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action8<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Seq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action9<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Teq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action10<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Deq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action11<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Assign
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action12<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action13<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Or
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action14<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action15<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::And
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action16<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action17<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Eq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action18<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Neq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action19<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action20<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Gt
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action21<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Lt
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action22<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Geq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action23<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Leq
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action24<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action25<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Add
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action26<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Sub
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action27<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action28<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Mul
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action29<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> BinaryOp {
        BinaryOp::Div
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action30<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action31<'input>(
        input: &'input str,
        (_, u, _): (usize, UnaryOp, usize),
        (_, p, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Unary(UnaryExpr {
                    unary_op: u,
                    expr: p,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action32<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> UnaryOp {
        UnaryOp::Star
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action33<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> UnaryOp {
        UnaryOp::Not
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action34<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> UnaryOp {
        UnaryOp::Neg
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action35<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> UnaryOp {
        UnaryOp::Address
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action36<'input>(
        input: &'input str,
        (_, __0, _): (usize, Identifier, usize),
    ) -> Box<Expr> {
        Box::new(Expr::Identifier(__0))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action37<'input>(
        input: &'input str,
        (_, __0, _): (usize, i32, usize),
    ) -> Box<Expr> {
        Box::new(Expr::Integer(__0))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action38<'input>(
        input: &'input str,
        (_, __0, _): (usize, f32, usize),
    ) -> Box<Expr> {
        Box::new(Expr::Float(__0))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action39<'input>(
        input: &'input str,
        (_, i, _): (usize, Identifier, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Access(AccessExpr {
                    name: i.name,
                    offset: e,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action40<'input>(
        input: &'input str,
        (_, i, _): (usize, Identifier, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, c, _): (usize, core::option::Option<Vec<Box<Expr>>>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Expr> {
        {
            match c {
                None => {
                    Box::new(
                        Expr::Function(FunctionCall {
                            name: i.name,
                            args: Vec::new(),
                            kind: None,
                            id: 0,
                        }),
                    )
                }
                Some(v) => {
                    Box::new(
                        Expr::Function(FunctionCall {
                            name: i.name,
                            args: v,
                            kind: None,
                            id: 0,
                        }),
                    )
                }
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action41<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, __0, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action42<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Vec<Box<Statement>> {
        <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action43<'input>(
        input: &'input str,
        (_, mut v, _): (usize, Vec<Box<Statement>>, usize),
        (_, s, _): (usize, Box<Statement>, usize),
    ) -> Vec<Box<Statement>> {
        {
            v.push(s);
            v
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action44<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action45<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action46<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action47<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action48<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action49<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action50<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, s, _): (usize, core::option::Option<Vec<Box<Statement>>>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        {
            match s {
                None => {
                    Box::new(
                        Statement::Compound(CompoundStatement {
                            stmts: Vec::new(),
                        }),
                    )
                }
                Some(l) => Box::new(Statement::Compound(CompoundStatement { stmts: l })),
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action51<'input>(
        input: &'input str,
        (_, k, _): (usize, Kind, usize),
        (_, i, _): (usize, Identifier, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        {
            Box::new(
                Statement::Declare(DeclareStatement {
                    kind: k,
                    name: i.name,
                    val: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action52<'input>(
        input: &'input str,
        (_, k, _): (usize, Kind, usize),
        (_, i, _): (usize, Identifier, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        {
            Box::new(
                Statement::Declare(DeclareStatement {
                    kind: k,
                    name: i.name,
                    val: Some(e),
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action53<'input>(
        input: &'input str,
        (_, __0, _): (usize, core::option::Option<Box<Expr>>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        Box::new(Statement::Expr(ExprStatement { expr: __0 }))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action54<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s1, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::If(IfStatement {
                condition: e,
                true_stmt: s1,
                false_stmt: None,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action55<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s1, _): (usize, Box<Statement>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s2, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::If(IfStatement {
                condition: e,
                true_stmt: s1,
                false_stmt: Some(s2),
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action56<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::While(WhileStatement {
                condition: e,
                stmt: s,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action57<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e1, _): (usize, core::option::Option<Box<Expr>>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e2, _): (usize, core::option::Option<Box<Expr>>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, e3, _): (usize, core::option::Option<Box<Expr>>, usize),
        (_, _, _): (usize, &'input str, usize),
        (_, s, _): (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::For(ForStatement {
                init: e1,
                each: e2,
                end: e3,
                stmt: s,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action58<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
        (_, __1, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::Jump(JumpStatement {
                jump_type: JumpOp::Continue,
                expr: None,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action59<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
        (_, __1, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::Jump(JumpStatement {
                jump_type: JumpOp::Break,
                expr: None,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action60<'input>(
        input: &'input str,
        (_, _, _): (usize, &'input str, usize),
        (_, __0, _): (usize, core::option::Option<Box<Expr>>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Statement> {
        Box::new(
            Statement::Jump(JumpStatement {
                jump_type: JumpOp::Return,
                expr: __0,
            }),
        )
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action61<'input>(
        input: &'input str,
        (_, t, _): (usize, Primitive, usize),
        (_, p, _): (usize, core::option::Option<u32>, usize),
    ) -> Kind {
        {
            match p {
                None => Kind { indir: 0, prim: t },
                Some(c) => Kind { indir: c, prim: t },
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action62<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> Primitive {
        Primitive::Void
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action63<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> Primitive {
        Primitive::Integer
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action64<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> Primitive {
        Primitive::Float
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action65<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> u32 {
        1
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action66<'input>(
        input: &'input str,
        (_, __0, _): (usize, u32, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> u32 {
        __0 + 1
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action67<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> Identifier {
        {
            Identifier {
                name: __0.to_string(),
                kind: None,
                id: 0,
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action68<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> i32 {
        i32::from_str(__0).unwrap()
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action69<'input>(
        input: &'input str,
        (_, __0, _): (usize, &'input str, usize),
    ) -> f32 {
        f32::from_str(__0).unwrap()
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action70<'input>(
        input: &'input str,
        (_, __0, _): (usize, u32, usize),
    ) -> core::option::Option<u32> {
        Some(__0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action71<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> core::option::Option<u32> {
        None
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action72<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> core::option::Option<Box<Expr>> {
        Some(__0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action73<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> core::option::Option<Box<Expr>> {
        None
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action74<'input>(
        input: &'input str,
        (_, __0, _): (usize, Vec<Box<Statement>>, usize),
    ) -> core::option::Option<Vec<Box<Statement>>> {
        Some(__0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action75<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> core::option::Option<Vec<Box<Statement>>> {
        None
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action76<'input>(
        input: &'input str,
        (_, __0, _): (usize, Vec<Box<Expr>>, usize),
    ) -> core::option::Option<Vec<Box<Expr>>> {
        Some(__0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action77<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> core::option::Option<Vec<Box<Expr>>> {
        None
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action78<'input>(
        input: &'input str,
        (_, mut v, _): (usize, alloc::vec::Vec<Box<Expr>>, usize),
        (_, e, _): (usize, Box<Expr>, usize),
    ) -> Vec<Box<Expr>> {
        {
            v.push(e);
            v
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action79<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action80<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action81<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action82<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action83<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action84<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action85<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action86<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action87<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action88<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action89<'input>(
        input: &'input str,
        (_, l, _): (usize, Box<Expr>, usize),
        (_, o, _): (usize, BinaryOp, usize),
        (_, r, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        {
            Box::new(
                Expr::Binary(BinaryExpr {
                    binary_op: o,
                    left: l,
                    right: r,
                    kind: None,
                }),
            )
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action90<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action91<'input>(
        input: &'input str,
        (_, __0, _): (usize, Vec<Parameter>, usize),
    ) -> core::option::Option<Vec<Parameter>> {
        Some(__0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action92<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> core::option::Option<Vec<Parameter>> {
        None
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action93<'input>(
        input: &'input str,
        (_, mut v, _): (usize, alloc::vec::Vec<Parameter>, usize),
        (_, e, _): (usize, Parameter, usize),
    ) -> Vec<Parameter> {
        {
            v.push(e);
            v
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action94<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> alloc::vec::Vec<Parameter> {
        ::alloc::vec::Vec::new()
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action95<'input>(
        input: &'input str,
        (_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
    ) -> alloc::vec::Vec<Parameter> {
        v
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action96<'input>(
        input: &'input str,
        (_, __0, _): (usize, Parameter, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Parameter {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action97<'input>(
        input: &'input str,
        __lookbehind: &usize,
        __lookahead: &usize,
    ) -> alloc::vec::Vec<Box<Expr>> {
        ::alloc::vec::Vec::new()
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action98<'input>(
        input: &'input str,
        (_, v, _): (usize, alloc::vec::Vec<Box<Expr>>, usize),
    ) -> alloc::vec::Vec<Box<Expr>> {
        v
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action99<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
        (_, _, _): (usize, &'input str, usize),
    ) -> Box<Expr> {
        __0
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action100<'input>(
        input: &'input str,
        (_, __0, _): (usize, Box<Expr>, usize),
    ) -> alloc::vec::Vec<Box<Expr>> {
        <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action101<'input>(
        input: &'input str,
        (_, v, _): (usize, alloc::vec::Vec<Box<Expr>>, usize),
        (_, e, _): (usize, Box<Expr>, usize),
    ) -> alloc::vec::Vec<Box<Expr>> {
        {
            let mut v = v;
            v.push(e);
            v
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action102<'input>(
        input: &'input str,
        (_, __0, _): (usize, Parameter, usize),
    ) -> alloc::vec::Vec<Parameter> {
        <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action103<'input>(
        input: &'input str,
        (_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
        (_, e, _): (usize, Parameter, usize),
    ) -> alloc::vec::Vec<Parameter> {
        {
            let mut v = v;
            v.push(e);
            v
        }
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action104<'input>(
        input: &'input str,
        __0: (usize, Box<Expr>, usize),
        __1: (usize, &'input str, usize),
    ) -> alloc::vec::Vec<Box<Expr>> {
        let __start0 = __0.0;
        let __end0 = __1.2;
        let __temp0 = __action99(input, __0, __1);
        let __temp0 = (__start0, __temp0, __end0);
        __action100(input, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action105<'input>(
        input: &'input str,
        __0: (usize, alloc::vec::Vec<Box<Expr>>, usize),
        __1: (usize, Box<Expr>, usize),
        __2: (usize, &'input str, usize),
    ) -> alloc::vec::Vec<Box<Expr>> {
        let __start0 = __1.0;
        let __end0 = __2.2;
        let __temp0 = __action99(input, __1, __2);
        let __temp0 = (__start0, __temp0, __end0);
        __action101(input, __0, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action106<'input>(
        input: &'input str,
        __0: (usize, Box<Expr>, usize),
    ) -> Vec<Box<Expr>> {
        let __start0 = __0.0;
        let __end0 = __0.0;
        let __temp0 = __action97(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action78(input, __temp0, __0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action107<'input>(
        input: &'input str,
        __0: (usize, alloc::vec::Vec<Box<Expr>>, usize),
        __1: (usize, Box<Expr>, usize),
    ) -> Vec<Box<Expr>> {
        let __start0 = __0.0;
        let __end0 = __0.2;
        let __temp0 = __action98(input, __0);
        let __temp0 = (__start0, __temp0, __end0);
        __action78(input, __temp0, __1)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action108<'input>(
        input: &'input str,
        __0: (usize, Parameter, usize),
        __1: (usize, &'input str, usize),
    ) -> alloc::vec::Vec<Parameter> {
        let __start0 = __0.0;
        let __end0 = __1.2;
        let __temp0 = __action96(input, __0, __1);
        let __temp0 = (__start0, __temp0, __end0);
        __action102(input, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action109<'input>(
        input: &'input str,
        __0: (usize, alloc::vec::Vec<Parameter>, usize),
        __1: (usize, Parameter, usize),
        __2: (usize, &'input str, usize),
    ) -> alloc::vec::Vec<Parameter> {
        let __start0 = __1.0;
        let __end0 = __2.2;
        let __temp0 = __action96(input, __1, __2);
        let __temp0 = (__start0, __temp0, __end0);
        __action103(input, __0, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action110<'input>(
        input: &'input str,
        __0: (usize, Parameter, usize),
    ) -> Vec<Parameter> {
        let __start0 = __0.0;
        let __end0 = __0.0;
        let __temp0 = __action94(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action93(input, __temp0, __0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action111<'input>(
        input: &'input str,
        __0: (usize, alloc::vec::Vec<Parameter>, usize),
        __1: (usize, Parameter, usize),
    ) -> Vec<Parameter> {
        let __start0 = __0.0;
        let __end0 = __0.2;
        let __temp0 = __action95(input, __0);
        let __temp0 = (__start0, __temp0, __end0);
        __action93(input, __temp0, __1)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action112<'input>(
        input: &'input str,
        __0: (usize, Identifier, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, Vec<Box<Expr>>, usize),
        __3: (usize, &'input str, usize),
    ) -> Box<Expr> {
        let __start0 = __2.0;
        let __end0 = __2.2;
        let __temp0 = __action76(input, __2);
        let __temp0 = (__start0, __temp0, __end0);
        __action40(input, __0, __1, __temp0, __3)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action113<'input>(
        input: &'input str,
        __0: (usize, Identifier, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, &'input str, usize),
    ) -> Box<Expr> {
        let __start0 = __1.2;
        let __end0 = __2.0;
        let __temp0 = __action77(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action40(input, __0, __1, __temp0, __2)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action114<'input>(
        input: &'input str,
        __0: (usize, Kind, usize),
        __1: (usize, Identifier, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, Vec<Parameter>, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, Box<Statement>, usize),
    ) -> Box<FunctionDeclaration> {
        let __start0 = __3.0;
        let __end0 = __3.2;
        let __temp0 = __action91(input, __3);
        let __temp0 = (__start0, __temp0, __end0);
        __action3(input, __0, __1, __2, __temp0, __4, __5)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action115<'input>(
        input: &'input str,
        __0: (usize, Kind, usize),
        __1: (usize, Identifier, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, Box<Statement>, usize),
    ) -> Box<FunctionDeclaration> {
        let __start0 = __2.2;
        let __end0 = __3.0;
        let __temp0 = __action92(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action3(input, __0, __1, __2, __temp0, __3, __4)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action116<'input>(
        input: &'input str,
        __0: (usize, Box<Expr>, usize),
        __1: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __0.0;
        let __end0 = __0.2;
        let __temp0 = __action72(input, __0);
        let __temp0 = (__start0, __temp0, __end0);
        __action53(input, __temp0, __1)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action117<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __0.0;
        let __end0 = __0.0;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action53(input, __temp0, __0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action118<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, Box<Expr>, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, Box<Expr>, usize),
        __5: (usize, &'input str, usize),
        __6: (usize, Box<Expr>, usize),
        __7: (usize, &'input str, usize),
        __8: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __2.0;
        let __end0 = __2.2;
        let __start1 = __4.0;
        let __end1 = __4.2;
        let __start2 = __6.0;
        let __end2 = __6.2;
        let __temp0 = __action72(input, __2);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action72(input, __4);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action72(input, __6);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __3, __temp1, __5, __temp2, __7, __8)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action119<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, Box<Expr>, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, Box<Expr>, usize),
        __5: (usize, &'input str, usize),
        __6: (usize, &'input str, usize),
        __7: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __2.0;
        let __end0 = __2.2;
        let __start1 = __4.0;
        let __end1 = __4.2;
        let __start2 = __5.2;
        let __end2 = __6.0;
        let __temp0 = __action72(input, __2);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action72(input, __4);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action73(input, &__start2, &__end2);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __3, __temp1, __5, __temp2, __6, __7)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action120<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, Box<Expr>, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, Box<Expr>, usize),
        __6: (usize, &'input str, usize),
        __7: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __2.0;
        let __end0 = __2.2;
        let __start1 = __3.2;
        let __end1 = __4.0;
        let __start2 = __5.0;
        let __end2 = __5.2;
        let __temp0 = __action72(input, __2);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action73(input, &__start1, &__end1);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action72(input, __5);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __3, __temp1, __4, __temp2, __6, __7)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action121<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, Box<Expr>, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, &'input str, usize),
        __6: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __2.0;
        let __end0 = __2.2;
        let __start1 = __3.2;
        let __end1 = __4.0;
        let __start2 = __4.2;
        let __end2 = __5.0;
        let __temp0 = __action72(input, __2);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action73(input, &__start1, &__end1);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action73(input, &__start2, &__end2);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __3, __temp1, __4, __temp2, __5, __6)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action122<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, Box<Expr>, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, Box<Expr>, usize),
        __6: (usize, &'input str, usize),
        __7: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __1.2;
        let __end0 = __2.0;
        let __start1 = __3.0;
        let __end1 = __3.2;
        let __start2 = __5.0;
        let __end2 = __5.2;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action72(input, __3);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action72(input, __5);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __2, __temp1, __4, __temp2, __6, __7)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action123<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, Box<Expr>, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, &'input str, usize),
        __6: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __1.2;
        let __end0 = __2.0;
        let __start1 = __3.0;
        let __end1 = __3.2;
        let __start2 = __4.2;
        let __end2 = __5.0;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action72(input, __3);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action73(input, &__start2, &__end2);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __2, __temp1, __4, __temp2, __5, __6)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action124<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, Box<Expr>, usize),
        __5: (usize, &'input str, usize),
        __6: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __1.2;
        let __end0 = __2.0;
        let __start1 = __2.2;
        let __end1 = __3.0;
        let __start2 = __4.0;
        let __end2 = __4.2;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action73(input, &__start1, &__end1);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action72(input, __4);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __2, __temp1, __3, __temp2, __5, __6)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action125<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
        __2: (usize, &'input str, usize),
        __3: (usize, &'input str, usize),
        __4: (usize, &'input str, usize),
        __5: (usize, Box<Statement>, usize),
    ) -> Box<Statement> {
        let __start0 = __1.2;
        let __end0 = __2.0;
        let __start1 = __2.2;
        let __end1 = __3.0;
        let __start2 = __3.2;
        let __end2 = __4.0;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        let __temp1 = __action73(input, &__start1, &__end1);
        let __temp1 = (__start1, __temp1, __end1);
        let __temp2 = __action73(input, &__start2, &__end2);
        let __temp2 = (__start2, __temp2, __end2);
        __action57(input, __0, __1, __temp0, __2, __temp1, __3, __temp2, __4, __5)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action126<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, Box<Expr>, usize),
        __2: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __1.0;
        let __end0 = __1.2;
        let __temp0 = __action72(input, __1);
        let __temp0 = (__start0, __temp0, __end0);
        __action60(input, __0, __temp0, __2)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action127<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __0.2;
        let __end0 = __1.0;
        let __temp0 = __action73(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action60(input, __0, __temp0, __1)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action128<'input>(
        input: &'input str,
        __0: (usize, Primitive, usize),
        __1: (usize, u32, usize),
    ) -> Kind {
        let __start0 = __1.0;
        let __end0 = __1.2;
        let __temp0 = __action70(input, __1);
        let __temp0 = (__start0, __temp0, __end0);
        __action61(input, __0, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action129<'input>(input: &'input str, __0: (usize, Primitive, usize)) -> Kind {
        let __start0 = __0.2;
        let __end0 = __0.2;
        let __temp0 = __action71(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action61(input, __0, __temp0)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action130<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, Vec<Box<Statement>>, usize),
        __2: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __1.0;
        let __end0 = __1.2;
        let __temp0 = __action74(input, __1);
        let __temp0 = (__start0, __temp0, __end0);
        __action50(input, __0, __temp0, __2)
    }
    #[allow(unused_variables)]
    #[allow(clippy::too_many_arguments)]
    fn __action131<'input>(
        input: &'input str,
        __0: (usize, &'input str, usize),
        __1: (usize, &'input str, usize),
    ) -> Box<Statement> {
        let __start0 = __0.2;
        let __end0 = __1.0;
        let __temp0 = __action75(input, &__start0, &__end0);
        let __temp0 = (__start0, __temp0, __end0);
        __action50(input, __0, __temp0, __1)
    }
    #[allow(clippy::type_complexity)]
    pub trait __ToTriple<'input> {
        fn to_triple(
            value: Self,
        ) -> Result<
            (usize, Token<'input>, usize),
            __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
        >;
    }
    impl<'input> __ToTriple<'input> for (usize, Token<'input>, usize) {
        fn to_triple(
            value: Self,
        ) -> Result<
            (usize, Token<'input>, usize),
            __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
        > {
            Ok(value)
        }
    }
    impl<'input> __ToTriple<'input>
    for Result<(usize, Token<'input>, usize), &'static str> {
        fn to_triple(
            value: Self,
        ) -> Result<
            (usize, Token<'input>, usize),
            __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
        > {
            match value {
                Ok(v) => Ok(v),
                Err(error) => {
                    Err(__lalrpop_util::ParseError::User {
                        error,
                    })
                }
            }
        }
    }
}
pub mod printer {
    use crate::ast::*;
    use crate::traverse::Traverseable;
    use crate::visitor::Visitor;
    pub struct Printer {
        count: u32,
        stk: Vec<u32>,
    }
    impl Printer {
        pub fn new() -> Self {
            Self { count: 0, stk: Vec::new() }
        }
        pub fn print(&mut self, m: &mut Module) {
            {
                ::std::io::_print(format_args!("digraph AST {{\n"));
            };
            m.accept(self);
            {
                ::std::io::_print(format_args!("}}\n"));
            };
        }
        fn make_node(&mut self, s: &str) {
            let c = self.stk.pop().unwrap();
            {
                ::std::io::_print(
                    format_args!(
                        "{0}\n",
                        &{
                            let res = ::alloc::fmt::format(
                                format_args!("    node{0} [label=\"{1}\"];", c, s),
                            );
                            res
                        },
                    ),
                );
            };
            if let Some(p) = self.stk.last() {
                {
                    ::std::io::_print(format_args!("    node{0} -> node{1};\n", p, c));
                };
            }
        }
    }
    #[allow(unused_variables)]
    impl Visitor for Printer {
        fn handle_module(&mut self, m: &mut Module) {
            self.make_node("Module");
        }
        fn handle_function_declaration(&mut self, f: &mut FunctionDeclaration) {
            let mut kind_str = {
                let res = ::alloc::fmt::format(format_args!("{0:?}", f.ret.prim));
                res
            };
            for _ in 0..f.ret.indir {
                kind_str.push('*');
            }
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Declare {1} {0}()", f.name, kind_str),
                    );
                    res
                },
            );
        }
        fn handle_declare_statement(&mut self, d: &mut DeclareStatement) {
            let mut kind_str = {
                let res = ::alloc::fmt::format(format_args!("{0:?}", d.kind.prim));
                res
            };
            for _ in 0..d.kind.indir {
                kind_str.push('*');
            }
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Declare: {1} {0}", d.name, kind_str),
                    );
                    res
                },
            );
        }
        fn handle_expr_statement(&mut self, e: &mut ExprStatement) {
            self.make_node("Expression Statement");
        }
        fn handle_if_statement(&mut self, i: &mut IfStatement) {
            self.make_node("If");
        }
        fn handle_for_statement(&mut self, f: &mut ForStatement) {
            self.make_node("For");
        }
        fn handle_while_statement(&mut self, w: &mut WhileStatement) {
            self.make_node("While");
        }
        fn handle_compound_statement(&mut self, c: &mut CompoundStatement) {
            self.make_node("Compound Statement");
        }
        fn handle_jump_statement(&mut self, j: &mut JumpStatement) {
            self.make_node("Jump Statement");
        }
        fn handle_expr(&mut self, e: &mut Expr) {
            match e.etype {
                ExprType::Integer(i) => self.handle_integer(i),
                ExprType::Float(f) => self.handle_float(f),
                _ => {}
            }
        }
        fn handle_function_call(&mut self, f: &mut FunctionCall) {
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Call Function: {0} -> {1}",
                            f.name,
                            match f.kind {
                                None => "Unknown".to_string(),
                                Some(k) => {
                                    let res = ::alloc::fmt::format(format_args!("{0}", k));
                                    res
                                }
                            },
                        ),
                    );
                    res
                },
            );
        }
        fn handle_access(&mut self, a: &mut AccessExpr) {
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Access: {0} -> {1}",
                            a.name,
                            match a.kind {
                                None => "Unknown".to_string(),
                                Some(k) => {
                                    let res = ::alloc::fmt::format(format_args!("{0}", k));
                                    res
                                }
                            },
                        ),
                    );
                    res
                },
            );
        }
        fn handle_unary(&mut self, u: &mut UnaryExpr) {
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Unary: {0:?} -> {1}",
                            u.unary_op,
                            match u.kind {
                                None => "Unknown".to_string(),
                                Some(k) => {
                                    let res = ::alloc::fmt::format(format_args!("{0}", k));
                                    res
                                }
                            },
                        ),
                    );
                    res
                },
            );
        }
        fn handle_binary(&mut self, b: &mut BinaryExpr) {
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Binary: {0:?} -> {1}",
                            b.binary_op,
                            match b.kind {
                                None => "Unknown".to_string(),
                                Some(k) => {
                                    let res = ::alloc::fmt::format(format_args!("{0}", k));
                                    res
                                }
                            },
                        ),
                    );
                    res
                },
            );
        }
        fn handle_identifier(&mut self, i: &mut Identifier) {
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Identifier ({0}): {1} -> {2}",
                            i.id,
                            i.name,
                            match i.kind {
                                None => "Unknown".to_string(),
                                Some(k) => {
                                    let res = ::alloc::fmt::format(format_args!("{0}", k));
                                    res
                                }
                            },
                        ),
                    );
                    res
                },
            );
        }
        fn handle_integer(&mut self, i: i32) {
            self.setup();
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(format_args!("Integer: {0}", i));
                    res
                },
            );
        }
        fn handle_float(&mut self, f: f32) {
            self.setup();
            self.make_node(
                &{
                    let res = ::alloc::fmt::format(format_args!("Float: {0}", f));
                    res
                },
            );
        }
        fn setup(&mut self) {
            self.stk.push(self.count);
            self.count += 1;
        }
    }
}
pub mod visitor {
    use crate::ast::*;
    #[allow(unused_variables)]
    pub trait Visitor {
        fn handle_module(&mut self, m: &mut Module) {}
        fn begin_function_declaration(&mut self, f: &mut FunctionDeclaration) {}
        fn handle_function_declaration(&mut self, f: &mut FunctionDeclaration) {}
        fn handle_statement(&mut self, s: &mut Statement) {}
        fn handle_declare_statement(&mut self, d: &mut DeclareStatement) {}
        fn handle_expr_statement(&mut self, e: &mut ExprStatement) {}
        fn handle_if_statement(&mut self, i: &mut IfStatement) {}
        fn begin_for_statement(&mut self, f: &mut ForStatement) {}
        fn handle_for_statement(&mut self, f: &mut ForStatement) {}
        fn handle_while_statement(&mut self, w: &mut WhileStatement) {}
        fn begin_compound_statement(&mut self, c: &mut CompoundStatement) {}
        fn handle_compound_statement(&mut self, c: &mut CompoundStatement) {}
        fn handle_jump_statement(&mut self, j: &mut JumpStatement) {}
        fn handle_expr(&mut self, e: &mut Expr) {}
        fn handle_function_call(&mut self, f: &mut FunctionCall) {}
        fn handle_access(&mut self, a: &mut AccessExpr) {}
        fn handle_unary(&mut self, u: &mut UnaryExpr) {}
        fn handle_binary(&mut self, b: &mut BinaryExpr) {}
        fn handle_integer(&mut self, i: i32) {}
        fn handle_float(&mut self, f: f32) {}
        fn handle_identifier(&mut self, i: &mut Identifier) {}
        fn setup(&mut self) {}
    }
}
pub mod traverse {
    use crate::ast::*;
    use crate::visitor::Visitor;
    pub trait Traverseable {
        fn accept<T: Visitor>(&mut self, v: &mut T);
    }
    impl Traverseable for Module {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            for f in &mut self.functions {
                f.accept(v);
            }
            v.handle_module(self);
        }
    }
    impl Traverseable for FunctionDeclaration {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            v.begin_function_declaration(self);
            self.statement.accept(v);
            v.handle_function_declaration(self);
        }
    }
    impl Traverseable for Statement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            match self {
                Statement::Declare(ref mut d) => d.accept(v),
                Statement::Expr(ref mut e) => e.accept(v),
                Statement::If(ref mut i) => i.accept(v),
                Statement::For(ref mut f) => f.accept(v),
                Statement::While(ref mut w) => w.accept(v),
                Statement::Compound(ref mut c) => c.accept(v),
                Statement::Jump(ref mut j) => j.accept(v),
            }
            v.handle_statement(self);
        }
    }
    impl Traverseable for DeclareStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            if let Some(e) = &mut self.val {
                e.accept(v);
            }
            v.handle_declare_statement(self);
        }
    }
    impl Traverseable for ExprStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            if let Some(e) = &mut self.expr {
                e.accept(v);
            }
            v.handle_expr_statement(self);
        }
    }
    impl Traverseable for IfStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            self.condition.accept(v);
            self.true_stmt.accept(v);
            if let Some(e) = &mut self.false_stmt {
                e.accept(v);
            }
            v.handle_if_statement(self);
        }
    }
    impl Traverseable for ForStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            if let Some(e) = &mut self.init {
                e.accept(v);
            }
            if let Some(e) = &mut self.each {
                e.accept(v);
            }
            if let Some(e) = &mut self.end {
                e.accept(v);
            }
            self.stmt.accept(v);
            v.handle_for_statement(self);
        }
    }
    impl Traverseable for WhileStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            self.condition.accept(v);
            self.stmt.accept(v);
            v.handle_while_statement(self);
        }
    }
    impl Traverseable for CompoundStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            v.begin_compound_statement(self);
            for s in &mut self.stmts {
                s.accept(v);
            }
            v.handle_compound_statement(self);
        }
    }
    impl Traverseable for JumpStatement {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            if let Some(e) = &mut self.expr {
                e.accept(v)
            }
            v.handle_jump_statement(self);
        }
    }
    impl Traverseable for Expr {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            match self.etype {
                ExprType::Function(ref mut f) => f.accept(v),
                ExprType::Access(ref mut a) => a.accept(v),
                ExprType::Unary(ref mut u) => u.accept(v),
                ExprType::Binary(ref mut b) => b.accept(v),
                ExprType::Identifier(ref mut i) => i.accept(v),
                ExprType::Integer(_) => {}
                ExprType::Float(_) => {}
            }
            v.handle_expr(self);
        }
    }
    impl Traverseable for FunctionCall {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            for e in &mut self.args {
                e.accept(v);
            }
            v.handle_function_call(self);
        }
    }
    impl Traverseable for AccessExpr {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            self.offset.accept(v);
            v.handle_access(self);
        }
    }
    impl Traverseable for UnaryExpr {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            self.expr.accept(v);
            v.handle_unary(self);
        }
    }
    impl Traverseable for BinaryExpr {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            self.left.accept(v);
            self.right.accept(v);
            v.handle_binary(self);
        }
    }
    impl Traverseable for Identifier {
        fn accept<T: Visitor>(&mut self, v: &mut T) {
            v.setup();
            v.handle_identifier(self);
        }
    }
}
pub mod semantic {
    use crate::ast::*;
    use crate::visitor::Visitor;
    use crate::traverse::Traverseable;
    use crate::symboltable::{SymbolTable, VSymbol, FSymbol};
    struct Semantic {
        fname: String,
        vsym: SymbolTable<VSymbol>,
        fsym: SymbolTable<FSymbol>,
    }
    impl Semantic {
        pub fn new() -> Self {
            Self {
                fname: String::new(),
                vsym: SymbolTable::new(),
                fsym: SymbolTable::new(),
            }
        }
        pub fn analyze(&mut self, m: &mut Module) {
            for f in &m.functions {
                self.fsym.insert(f);
            }
            m.accept(self);
        }
    }
    impl Visitor for Semantic {
        fn begin_function_declaration(&mut self, f: &mut FunctionDeclaration) {
            self.vsym.scope_in();
            for p in &f.params {
                self.vsym.insert(&p.name, p.kind);
            }
            self.fname = f.name.clone();
        }
        fn handle_function_declaration(&mut self, _f: &mut FunctionDeclaration) {
            self.vsym.scope_out();
        }
        fn handle_declare_statement(&mut self, d: &mut DeclareStatement) {
            if self.vsym.contains_key_in_scope(&d.name) {
                ::core::panicking::panic_fmt(
                    format_args!("Defining already defined variable!"),
                );
            }
            self.vsym.insert(&d.name, d.kind);
            if let Some(e) = &d.val {
                if !(d.kind == e.kind.unwrap()) {
                    ::core::panicking::panic_display(
                        &&{
                            let res = ::alloc::fmt::format(
                                format_args!(
                                    "variable should have type {0:?}, but is actually {1:?}.",
                                    d.kind,
                                    e.kind,
                                ),
                            );
                            res
                        },
                    )
                }
            }
        }
        fn begin_for_statement(&mut self, _f: &mut ForStatement) {
            self.vsym.scope_in();
        }
        fn handle_for_statement(&mut self, _f: &mut ForStatement) {
            self.vsym.scope_out();
        }
        fn begin_compound_statement(&mut self, _c: &mut CompoundStatement) {
            self.vsym.scope_in();
        }
        fn handle_compound_statement(&mut self, _c: &mut CompoundStatement) {
            self.vsym.scope_out();
        }
        fn handle_jump_statement(&mut self, j: &mut JumpStatement) {
            if j.jump_type != JumpOp::Return {
                return;
            }
            let func = self.fsym.get(&self.fname).unwrap();
            match &j.expr {
                None => {
                    if !(func.kind == Kind::void()) {
                        ::core::panicking::panic_fmt(format_args!("Return mismatch"))
                    }
                }
                Some(e) => {
                    if !(func.kind == e.kind().unwrap()) {
                        ::core::panicking::panic_fmt(format_args!("Return mismatch"))
                    }
                }
            }
        }
        fn handle_function_call(&mut self, f: &mut FunctionCall) {
            let fsym = match self.fsym.get(&f.name) {
                None => {
                    ::core::panicking::panic_fmt(
                        format_args!("Reference To Non-Existing Function {0}", f.name),
                    )
                }
                Some(name) => name,
            };
            if !(f.args.len() == fsym.args.len()) {
                ::core::panicking::panic_fmt(
                    format_args!("Argument List does not match Function Argument List!"),
                )
            }
            for idx in 0..f.args.len() {
                let argk = f.args[idx].kind().unwrap();
                let fk = fsym.args[idx];
                if fk != argk {
                    ::core::panicking::panic_fmt(format_args!("Argument Type Mismatch!"))
                }
            }
            f.kind = Some(fsym.kind);
        }
        fn handle_access(&mut self, _a: &mut AccessExpr) {
            ::core::panicking::panic_fmt(format_args!("THERE ARE NO ACCESSES..."));
        }
        fn handle_unary(&mut self, u: &mut UnaryExpr) {
            let mut kind = u.expr.kind().unwrap();
            match u.unary_op {
                UnaryOp::Address => {
                    if match *u.expr {
                        Expr::Ident(_) => true,
                        _ => false,
                    } {
                        kind.indir += 1;
                        u.kind = Some(kind);
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Cannot take Address of Non-Identifier!"),
                        );
                    }
                }
                UnaryOp::Star => {
                    if match *u.expr {
                        Expr::Ident(_) => true,
                        _ => false,
                    } {
                        if kind.indir == 0 {
                            ::core::panicking::panic_fmt(
                                format_args!("Cannot dereferencea Primitive!"),
                            );
                        } else {
                            kind.indir -= 1;
                        }
                        u.kind = Some(kind);
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Cannot dereference Non-Identifier!"),
                        );
                    }
                }
                UnaryOp::Neg => {
                    if kind.indir == 0 {
                        u.kind = Some(kind);
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Cannot Negate Address!"),
                        );
                    }
                }
                UnaryOp::Not => {
                    if kind != Kind::int() {
                        u.kind = Some(kind);
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Cannot only NOT Integers!"),
                        );
                    }
                }
            }
        }
        fn handle_binary(&mut self, b: &mut BinaryExpr) {
            let lkind = b.left.kind().unwrap();
            let rkind = b.right.kind().unwrap();
            if lkind == rkind {
                b.kind = Some(lkind);
                return;
            }
            match b.binary_op {
                BinaryOp::Peq
                | BinaryOp::Seq
                | BinaryOp::Teq
                | BinaryOp::Deq
                | BinaryOp::Assign => {
                    if lkind == Kind::float() && rkind == Kind::int() {
                        b.kind = Some(lkind);
                        return;
                    }
                    ::core::panicking::panic_fmt(format_args!("Invalid Assignment!"));
                }
                BinaryOp::Add | BinaryOp::Div | BinaryOp::Mul | BinaryOp::Sub => {
                    if lkind == Kind::float() || rkind == Kind::float() {
                        b.kind = Some(Kind::float());
                    } else if lkind.indir != 0 || rkind.indir != 0 {
                        if lkind == Kind::int() {
                            b.kind = Some(rkind);
                        } else if rkind == Kind::int() {
                            b.kind = Some(lkind);
                        } else {
                            ::core::panicking::panic_fmt(
                                format_args!("Cannot apply Binary Op to two pointers!"),
                            );
                        }
                    } else {
                        b.kind = Some(Kind::int());
                    }
                }
                BinaryOp::Eq
                | BinaryOp::Geq
                | BinaryOp::Gt
                | BinaryOp::Leq
                | BinaryOp::Neq
                | BinaryOp::Lt => {
                    if lkind.indir == 0 && rkind.indir == 0 {
                        b.kind = Some(Kind::int());
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Cannot compare two pointers!"),
                        );
                    }
                }
                BinaryOp::Or | BinaryOp::And => {
                    if lkind == Kind::int() && rkind == Kind::float() {
                        b.kind = Some(Kind::int());
                    } else {
                        ::core::panicking::panic_fmt(
                            format_args!("Can only OR or AND two Integers!"),
                        );
                    }
                }
            }
        }
        fn handle_identifier(&mut self, i: &mut Identifier) {
            match self.vsym.get(&i.name) {
                None => {
                    ::core::panicking::panic_fmt(
                        format_args!("Identifier {0} not found!", i.name),
                    )
                }
                Some(s) => {
                    i.kind = Some(s.kind);
                    i.id = s.id;
                }
            }
        }
    }
    use crate::parser::moduleParser;
    use crate::printer::Printer;
}
pub mod symboltable {
    use std::collections::HashMap;
    use crate::ast::*;
    pub trait Symbol {}
    pub struct VSymbol {
        pub id: u32,
        pub kind: Kind,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for VSymbol {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "VSymbol",
                "id",
                &self.id,
                "kind",
                &&self.kind,
            )
        }
    }
    impl Symbol for VSymbol {}
    pub struct FSymbol {
        pub id: u32,
        pub kind: Kind,
        pub args: Vec<Kind>,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for FSymbol {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "FSymbol",
                "id",
                &self.id,
                "kind",
                &self.kind,
                "args",
                &&self.args,
            )
        }
    }
    impl Symbol for FSymbol {}
    pub struct SymbolTable<T: Symbol> {
        stk: Vec<HashMap<String, T>>,
        count: u32,
    }
    impl SymbolTable<VSymbol> {
        pub fn insert(&mut self, name: &str, kind: Kind) {
            let table = self.stk.last_mut().unwrap();
            table.insert(name.to_string(), VSymbol { id: self.count, kind });
            self.count += 1;
        }
    }
    impl SymbolTable<FSymbol> {
        pub fn insert(&mut self, func: &FunctionDeclaration) {
            let table = self.stk.last_mut().unwrap();
            let kind = func.ret;
            let args = func.params.iter().map(|p| p.kind).collect();
            table
                .insert(
                    func.name.to_string(),
                    FSymbol {
                        id: self.count,
                        kind,
                        args,
                    },
                );
            self.count += 1;
        }
    }
    impl<T: Symbol> SymbolTable<T> {
        pub fn new() -> Self {
            Self {
                stk: <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([HashMap::new()]),
                ),
                count: 0,
            }
        }
        pub fn contains_key_in_scope(&mut self, key: &str) -> bool {
            if let Some(table) = self.stk.last() {
                return table.contains_key(key);
            }
            return false;
        }
        pub fn get(&mut self, key: &str) -> Option<&T> {
            for table in &mut self.stk.iter().rev() {
                match table.get(key) {
                    None => {}
                    Some(s) => return Some(s),
                }
            }
            return None;
        }
        pub fn scope_in(&mut self) {
            self.stk.push(HashMap::new());
        }
        pub fn scope_out(&mut self) {
            self.stk.pop();
        }
    }
}
pub mod translator {
    use crate::ast;
    use crate::ast::FunctionDeclaration;
    use crate::ir::{self, Operator};
    use crate::visitor::Visitor;
    use crate::traverse::Traverseable;
    struct Translator {
        nlabels: u32,
        loop_starts: Vec<ir::Label>,
        loop_ends: Vec<ir::Label>,
    }
    impl Translator {
        pub fn new() -> Self {
            Self {
                nlabels: 0,
                loop_starts: Vec::new(),
                loop_ends: Vec::new(),
            }
        }
        pub fn translate(&mut self, m: &mut ast::Module) -> Vec<ir::Statement> {
            let mut res = Vec::<ir::Statement>::new();
            for f in &m.functions {
                res.push(self.function_definition(f));
            }
            return res;
        }
        fn function_definition(&mut self, f: &FunctionDeclaration) -> ir::Statement {
            return ir::Statement::Seq(
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        ir::Statement::Label(self.create_label()),
                        self.compound_statement(&f.statement),
                    ]),
                ),
            );
        }
        fn statement(&mut self, s: &ast::Statement) -> Option<ir::Statement> {
            use ast::Statement::*;
            return match s {
                Declare(ref d) => self.declare_statement(d),
                Expr(ref e) => self.expr_statement(e),
                If(ref i) => Some(self.if_statement(i)),
                For(ref f) => Some(self.for_statement(f)),
                While(ref w) => Some(self.while_statement(w)),
                Compound(ref c) => Some(self.compound_statement(c)),
                Jump(ref j) => Some(self.jump_statement(j)),
            };
        }
        fn declare_statement(
            &mut self,
            d: &ast::DeclareStatement,
        ) -> Option<ir::Statement> {
            match d.val {
                None => return None,
                Some(e) => {
                    return Some(
                        ir::Statement::Move(
                            Box::new(ir::Expr::Temp(d.id)),
                            Box::new(self.expression(&e)),
                        ),
                    );
                }
            }
        }
        fn compound_statement(&mut self, c: &ast::CompoundStatement) -> ir::Statement {
            let mut stmts = Vec::<ir::Statement>::new();
            for stmt in &c.stmts {
                match self.statement(stmt) {
                    None => {}
                    Some(s) => stmts.push(s),
                }
            }
            return ir::Statement::Seq(stmts);
        }
        fn expr_statement(&mut self, e: &ast::ExprStatement) -> Option<ir::Statement> {
            return match e.expr {
                None => None,
                Some(ex) => Some(ir::Statement::Expr(Box::new(self.expression(&ex)))),
            };
        }
        fn if_statement(&mut self, i: &ast::IfStatement) -> ir::Statement {
            let lt = self.create_label();
            let lf = self.create_label();
            let mut ret = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    self.control(&i.condition, lt, lf),
                    ir::Statement::Label(lt),
                ]),
            );
            match self.statement(&i.true_stmt) {
                None => {}
                Some(s) => ret.push(s),
            }
            ret.push(ir::Statement::Label(lf));
            if let Some(s) = i.false_stmt {
                match self.statement(&s) {
                    None => {}
                    Some(s) => ret.push(s),
                }
            }
            return ir::Statement::Seq(ret);
        }
        fn for_statement(&mut self, f: &ast::ForStatement) -> ir::Statement {
            let mut ret = Vec::<ir::Statement>::new();
            match self.expr_statement(&f.init) {
                None => {}
                Some(s) => ret.push(s),
            }
            let lt = self.create_label();
            let lb = self.create_label();
            let le = self.create_label();
            self.loop_starts.push(lt);
            self.loop_ends.push(lb);
            ret.push(ir::Statement::Label(lt));
            match f.end {
                None => {}
                Some(s) => ret.push(self.control(&s, lb, le)),
            }
            ret.push(ir::Statement::Label(lb));
            match self.statement(&f.stmt) {
                None => {}
                Some(s) => ret.push(s),
            }
            match self.expr_statement(&f.each) {
                None => {}
                Some(s) => ret.push(s),
            }
            ret.push(ir::Statement::Jump(ir::Expr::Name(lt)));
            ret.push(ir::Statement::Label(le));
            self.loop_starts.pop();
            self.loop_ends.pop();
            return ir::Statement::Seq(ret);
        }
        fn while_statement(&mut self, w: &ast::WhileStatement) -> ir::Statement {
            let lt = self.create_label();
            let lb = self.create_label();
            let le = self.create_label();
            self.loop_starts.push(lt);
            self.loop_ends.push(lb);
            let mut ret = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    ir::Statement::Label(lt),
                    self.control(&w.condition, lb, le),
                    ir::Statement::Label(lb),
                ]),
            );
            match self.statement(&w.stmt) {
                None => {}
                Some(s) => ret.push(s),
            }
            ret.push(ir::Statement::Jump(ir::Expr::Name(lt)));
            ret.push(ir::Statement::Label(le));
            self.loop_starts.pop();
            self.loop_ends.pop();
            return ir::Statement::Seq(ret);
        }
        fn jump_statement(&mut self, j: &ast::JumpStatement) -> ir::Statement {
            use ast::JumpOp::*;
            match j.jump_type {
                Continue => {
                    match self.loop_starts.iter().last() {
                        None => {
                            ::core::panicking::panic_fmt(format_args!("You done goof"))
                        }
                        Some(l) => return ir::Statement::Jump(ir::Expr::Name(*l)),
                    }
                }
                Return => {
                    match j.expr {
                        None => ir::Statement::Return(None),
                        Some(s) => {
                            ir::Statement::Return(Some(Box::new(self.expression(&s))))
                        }
                    }
                }
                Break => {
                    match self.loop_ends.iter().last() {
                        None => {
                            ::core::panicking::panic_fmt(format_args!("You done goof"))
                        }
                        Some(l) => return ir::Statement::Jump(ir::Expr::Name(*l)),
                    }
                }
            }
        }
        fn control(
            &mut self,
            expr: &ast::Expr,
            t: ir::Label,
            f: ir::Label,
        ) -> ir::Statement {
            use ast::Expr::*;
            match expr {
                Unary(u) => {
                    use ast::UnaryOp::*;
                    match u.unary_op {
                        Not => return self.control(&u.expr, t, f),
                        _ => {
                            return ir::Statement::CJump(
                                Box::new(self.expression(expr)),
                                t,
                                f,
                            );
                        }
                    }
                }
                Binary(b) => {
                    use ast::BinaryOp::*;
                    match b.binary_op {
                        And => {
                            let l1 = self.create_label();
                            return ir::Statement::Seq(
                                <[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([
                                        self.control(&b.left, l1, f),
                                        ir::Statement::Label(l1),
                                        self.control(&b.right, t, f),
                                    ]),
                                ),
                            );
                        }
                        Or => {
                            let l1 = self.create_label();
                            return ir::Statement::Seq(
                                <[_]>::into_vec(
                                    #[rustc_box]
                                    ::alloc::boxed::Box::new([
                                        self.control(&b.left, t, l1),
                                        ir::Statement::Label(l1),
                                        self.control(&b.right, t, f),
                                    ]),
                                ),
                            );
                        }
                        _ => {}
                    }
                }
                Integer(i) => {
                    return ir::Statement::Jump(
                        ir::Expr::Name(if *i != 0 { t } else { f }),
                    );
                }
                Ident(i) => {
                    if !(i.kind.unwrap() == ast::Kind::int()) {
                        ::core::panicking::panic_fmt(
                            format_args!("Identifier is not an integer!"),
                        )
                    }
                    return ir::Statement::CJump(Box::new(ir::Expr::Temp(i.id)), t, f);
                }
                Float(_) => {
                    ::core::panicking::panic_fmt(
                        format_args!("Floats found in conditional!"),
                    )
                }
                _ => {
                    if !(expr.kind().unwrap() == ast::Kind::int()) {
                        ::core::panicking::panic_fmt(
                            format_args!("Conditional is not an integer!"),
                        )
                    }
                }
            }
            return ir::Statement::CJump(Box::new(self.expression(expr)), t, f);
        }
        fn expression(&mut self, e: &ast::Expr) -> ir::Expr {
            use ast::Expr::*;
            match e {
                Function(f) => self.function(&f),
                Access(a) => self.access(&a),
                Unary(u) => self.unary(&u),
                Binary(b) => self.binary(&b),
                Integer(i) => return ir::Expr::Const(ir::Primitive::Int(*i)),
                Float(f) => return ir::Expr::Const(ir::Primitive::Float(*f)),
                Ident(i) => return ir::Expr::Temp(i.id),
            }
        }
        fn function(&mut self, f: &ast::FunctionCall) -> ir::Expr {
            let mut v = Vec::<ir::Expr>::new();
            for exp in &f.args {
                v.push(self.expression(exp));
            }
            return ir::Expr::Call(ir::Label { id: f.id }, v);
        }
        fn access(&mut self, a: &ast::AccessExpr) -> ir::Expr {
            let mul = ir::Expr::BinOp(
                Box::new(ir::Expr::Const(ir::Primitive::Int(8))),
                Operator::Mul,
                Box::new(self.expression(&a.offset)),
            );
            let add = ir::Expr::BinOp(
                Box::new(ir::Expr::Temp(a.id)),
                Operator::Add,
                Box::new(mul),
            );
            return ir::Expr::Mem(Box::new(add));
        }
        fn unary(&mut self, u: &ast::UnaryExpr) -> ir::Expr {
            use ast::UnaryOp::*;
            let op = match u.unary_op {
                Star => ir::Operator::Star,
                Not => ir::Operator::Not,
                Neg => ir::Operator::Neg,
                Address => ir::Operator::Address,
            };
            return ir::Expr::UnOp(op, Box::new(self.expression(&u.expr)));
        }
        fn binary(&mut self, b: &ast::BinaryExpr) -> ir::Expr {
            use ast::BinaryOp::*;
            let op = match b.binary_op {
                Mul => ir::Operator::Mul,
                Div => ir::Operator::Div,
                Add => ir::Operator::Add,
                Sub => ir::Operator::Sub,
                Leq => ir::Operator::Leq,
                Geq => ir::Operator::Geq,
                Lt => ir::Operator::Lt,
                Gt => ir::Operator::Gt,
                Eq => ir::Operator::Eq,
                Peq => ir::Operator::Assign,
                Teq => ir::Operator::Assign,
                Deq => ir::Operator::Assign,
                Seq => ir::Operator::Assign,
                Neq => ir::Operator::Assign,
                Or => ir::Operator::Or,
                And => ir::Operator::And,
                Assign => ir::Operator::Assign,
            };
            if op != ir::Operator::Assign {
                return ir::Expr::BinOp(
                    Box::new(self.expression(&b.left)),
                    op,
                    Box::new(self.expression(&b.right)),
                );
            }
            op = match b.binary_op {
                Peq => ir::Operator::Add,
                Teq => ir::Operator::Mul,
                Seq => ir::Operator::Sub,
                Deq => ir::Operator::Div,
                _ => ir::Operator::Xor,
            };
            let stmt = match b.binary_op {
                Peq | Teq | Seq | Deq => {
                    ir::Statement::Move(
                        Box::new(ir::Expr::Temp(id)),
                        Box::new(
                            ir::Expr::BinOp(
                                Box::new(ir::Expr::Temp(id)),
                                op,
                                Box::new(self.expression(&b.right)),
                            ),
                        ),
                    )
                }
                Assign => {
                    ir::Statement::Move(
                        Box::new(ir::Expr::Temp(id)),
                        Box::new(self.expression(&b.right)),
                    )
                }
                _ => ::core::panicking::panic_fmt(format_args!("Oh no!")),
            };
            return ir::Expr::ESeq(Box::new(stmt), Box::new(self.expression(&b.left)));
        }
        fn create_label(&mut self) -> ir::Label {
            self.nlabels += 1;
            return ir::Label { id: self.nlabels - 1 };
        }
    }
}
pub mod ir {
    use crate::ast;
    pub enum Expr {
        Const(Primitive),
        Temp(u32),
        UnOp(Operator, Box<Expr>),
        BinOp(Box<Expr>, Operator, Box<Expr>),
        Mem(Box<Expr>),
        Call(Label, Vec<Expr>),
        Name(Label),
        ESeq(Box<Statement>, Box<Expr>),
    }
    pub enum Statement {
        Expr(Box<Expr>),
        Move(Box<Expr>, Box<Expr>),
        Seq(Vec<Statement>),
        Jump(Expr),
        CJump(Box<Expr>, Label, Label),
        Label(Label),
        Return(Option<Box<Expr>>),
    }
    pub struct Label {
        pub id: u32,
    }
    pub enum Primitive {
        Int(i32),
        Float(f32),
    }
    pub enum Operator {
        Add,
        Sub,
        Mul,
        Div,
        And,
        Or,
        Xor,
        Not,
        Eq,
        Neq,
        Leq,
        Geq,
        Lt,
        Gt,
        Peq,
        Meq,
        Seq,
        Teq,
        Deq,
        Assign,
        Star,
        Neg,
        Address,
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Operator {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Operator {
        #[inline]
        fn eq(&self, other: &Operator) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Operator {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Operator {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
}
pub mod utils {
    pub(crate) use polymorphic_enum;
}
